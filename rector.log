
 [WARNING] The Symfony/Twig/PHPUnit level sets have been deprecated since Rector 0.19.2 due to heavy performance loads  
           and conflicting overrides. Instead, please use the latest major set.                                         
                                                                                                                        
           For more information, visit https://getrector.com/blog/5-common-mistakes-in-rector-config-and-how-to-avoid-them


 [WARNING] The Symfony/Twig/PHPUnit level sets have been deprecated since Rector 0.19.2 due to heavy performance loads  
           and conflicting overrides. Instead, please use the latest major set.                                         
                                                                                                                        
           For more information, visit https://getrector.com/blog/5-common-mistakes-in-rector-config-and-how-to-avoid-them


95 files with changes
=====================

1) src/Controller/AdminController.php:22

    ---------- begin diff ----------
@@ @@

     public function prePersistUserEntity($user)
     {
-        $this->userManager->updateUser($user, false);
+        $this->userManager->updateUser($user);
     }

     public function preUpdateUserEntity($user)
     {
-        $this->userManager->updateUser($user, false);
+        $this->userManager->updateUser($user);
     }

 }
    ----------- end diff -----------

Applied rules:
 * RemoveExtraParametersRector (https://www.reddit.com/r/PHP/comments/a1ie7g/is_there_a_linter_for_argumentcounterror_for_php/)
 * ActionSuffixRemoverRector


2) src/Controller/ApiController.php:89

    ---------- begin diff ----------
@@ @@
      *
      * @Get("/sailak/{udala}")
      */
-    public function getSailakAction( Request $request, $udala )
+    public function getSailak( Request $request, $udala )
     {
         $_format = $request->get('_format','json');
         $sailak = $this->sailaRepo->findByUdala($udala);
@@ @@
      *
      * @Get("/azpisailenfitxak/{azpisailaid}")
      */
-    public function getAzpisailenfitxakAction( Request $request, $azpisailaid)
+    public function getAzpisailenfitxak( Request $request, $azpisailaid)
     {
         $_format = $request->get('_format','json');
         $fitxak = $this->fitxaRepo->findByAzpisaila($azpisailaid);
@@ @@
      *
      * @Get("/familisarea/{udala}")
      */
-    public function getFamilisareaAction( Request $request, $udala )
+    public function getFamilisarea( Request $request, $udala )
     {
         return $this->getSailakAction($request, $udala);
     }
@@ @@
      * @Get("/familiak/{udala}")
      * @Route(name="get_familiak", options={"expose"=true})
      */
-    public function getFamiliakAction( Request $request, $udala )
+    public function getFamiliak( Request $request, $udala )
     {
         $_format = $request->get('_format','json');
         $familiak = $this->familiaRepo->findByUdala($udala);
@@ @@
      * @Get("/azpifamiliak/{id}")
      * @Route(name="get_azpifamiliak", options={"expose"=true})
      */
-    public function getAzpifamiliakAction( Request $request, $id )
+    public function getAzpifamiliak( Request $request, $id )
     {
         $_format = $request->get('_format','json');
         $azpifamiliak = $this->familiaRepo->findBy([ 'parent' => $id ]);
@@ @@
      * @Annotations\View()
      * @Get("/fitxakbyfamilia/{id}")
      */
-    public function getFitxakByFamiliaAction( Request $request, $id )
+    public function getFitxakByFamilia( Request $request, $id )
     {
         $_format = $request->get('_format','json');
         $fitxak = $this->fitxaRepo->findByFamilia($id);
@@ @@
      * @Get("/fitxa/{id}")
      * @Route(name="get_fitxa", options={"expose"=true})
      */
-    public function getFitxaAction( Fitxa $fitxa )
+    public function getFitxa( Fitxa $fitxa ): \Symfony\Component\HttpFoundation\Response
     {
         $eremuak = $this->eremuakRepo->findOneByUdala($fitxa->getUdala());
         $labelak = $this->eremuakRepo->findLabelakByUdala($fitxa->getUdala());
@@ @@

         return $this->render(
             'fitxapi.xml.twig',
-            array(
-                'fitxa'      => $fitxa,
-                'eremuak'    => $eremuak,
-                'labelak'    => $labelak,
-                'kanalmotak' => $kanalmotak,
-            ),
+            ['fitxa'      => $fitxa, 'eremuak'    => $eremuak, 'labelak'    => $labelak, 'kanalmotak' => $kanalmotak],
             $response
         );
     }// "get_fitxa"            [GET] /fitxa/{id}
@@ @@
      * @Annotations\View()
      * @Get("/familiaorden/{id}")
      */
-    public function getFamiliaordenaAction( Request $request, $id )
+    public function getFamiliaordena( Request $request, $id )
     {
         $_format = $request->get('_format','json');
         $familia = $this->familiaRepo->find($id);
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector


3) src/Controller/AraudiaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="araudia_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA'))
         {
-            $araudias = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $araudias = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($araudias as $araudia) {
                 $deleteForms[$araudia->getId()] = $this->createDeleteForm($araudia)->createView();
             }

-            return $this->render('araudia/index.html.twig', array(
-                'araudias' => $araudias,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('araudia/index.html.twig', ['araudias' => $araudias, 'deleteforms' => $deleteForms]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="araudia_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN')) {
             $araudium = new Araudia();
@@ @@
             }
             

-            return $this->render('araudia/new.html.twig', array(
-                'araudium' => $araudium,
-                'form' => $form->createView(),
-            ));
+            return $this->render('araudia/new.html.twig', ['araudium' => $araudium, 'form' => $form->createView()]);
         }else
         {
             //Baimenik ez
@@ @@
      * @Route("/{id}", name="araudia_show")
      * @Method("GET")
      */
-    public function showAction(Araudia $araudium)
+    public function show(Araudia $araudium): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($araudium);

-        return $this->render('araudia/show.html.twig', array(
-            'araudium' => $araudium,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('araudia/show.html.twig', ['araudium' => $araudium, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="araudia_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Araudia $araudium)
+    public function edit(Request $request, Araudia $araudium)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($araudium->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($araudium);
                 $this->em->flush();

-                return $this->redirectToRoute('araudia_edit', array('id' => $araudium->getId()));
+                return $this->redirectToRoute('araudia_edit', ['id' => $araudium->getId()]);
             }

-            return $this->render('araudia/edit.html.twig', array(
-                'araudium' => $araudium,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('araudia/edit.html.twig', ['araudium' => $araudium, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="araudia_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Araudia $araudium)
+    public function delete(Request $request, Araudia $araudium): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($araudium->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Araudia $araudium)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('araudia_delete', array('id' => $araudium->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('araudia_delete', ['id' => $araudium->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


4) src/Controller/AraumotaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="araumota_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) 
         {
-            $araumotas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $araumotas = $this->repo->findBy( [], ['kodea'=>'ASC'] );
             $adapter = new ArrayAdapter($araumotas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($araumotas as $araumota) {
                 $deleteForms[$araumota->getId()] = $this->createDeleteForm($araumota)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Cette page n'existe pas.");
             }

-            return $this->render('araumota/index.html.twig', array(
-                'araumotas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('araumota/index.html.twig', ['araumotas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         } else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="araumota_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('araumota/new.html.twig', array(
-                'araumotum' => $araumotum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('araumota/new.html.twig', ['araumotum' => $araumotum, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="araumota_show")
      * @Method("GET")
      */
-    public function showAction(Araumota $araumotum)
+    public function show(Araumota $araumotum): Response
     {
         $deleteForm = $this->createDeleteForm($araumotum);

-        return $this->render('araumota/show.html.twig', array(
-            'araumotum' => $araumotum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('araumota/show.html.twig', ['araumotum' => $araumotum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="araumota_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Araumota $araumotum)
+    public function edit(Request $request, Araumota $araumotum)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($araumotum->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($araumotum);
                 $this->em->flush();

-                return $this->redirectToRoute('araumota_edit', array('id' => $araumotum->getId()));
+                return $this->redirectToRoute('araumota_edit', ['id' => $araumotum->getId()]);
             }

-            return $this->render('araumota/edit.html.twig', array(
-                'araumotum' => $araumotum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('araumota/edit.html.twig', ['araumotum' => $araumotum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="araumota_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Araumota $araumotum)
+    public function delete(Request $request, Araumota $araumotum): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($araumotum->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Araumota $araumotum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('araumota_delete', array('id' => $araumotum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('araumota_delete', ['id' => $araumotum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


5) src/Controller/ArruntaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="arrunta_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $arruntas = $this->repo->findAll();
@@ @@
             $adapter = new ArrayAdapter($arruntas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($arruntas as $arrunta) {
                 $deleteForms[$arrunta->getId()] = $this->createDeleteForm($arrunta)->createView();
             }
@@ @@
             } catch (\Pagerfanta\Exception\NotValidCurrentPageException $e) {
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }
-            return $this->render('arrunta/index.html.twig', array(
-                'arruntas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('arrunta/index.html.twig', ['arruntas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');            
@@ @@
      * @Route("/new", name="arrunta_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('arrunta/new.html.twig', array(
-                'arruntum' => $arruntum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('arrunta/new.html.twig', ['arruntum' => $arruntum, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="arrunta_show")
      * @Method("GET")
      */
-    public function showAction(Arrunta $arruntum)
+    public function show(Arrunta $arruntum): Response
     {
         $deleteForm = $this->createDeleteForm($arruntum);

-        return $this->render('arrunta/show.html.twig', array(
-            'arruntum' => $arruntum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('arrunta/show.html.twig', ['arruntum' => $arruntum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="arrunta_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Arrunta $arruntum)
+    public function edit(Request $request, Arrunta $arruntum)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($arruntum->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($arruntum);
                 $this->em->flush();
     
-                return $this->redirectToRoute('arrunta_edit', array('id' => $arruntum->getId()));
+                return $this->redirectToRoute('arrunta_edit', ['id' => $arruntum->getId()]);
             }
     
-            return $this->render('arrunta/edit.html.twig', array(
-                'arruntum' => $arruntum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('arrunta/edit.html.twig', ['arruntum' => $arruntum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="arrunta_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Arrunta $arruntum)
+    public function delete(Request $request, Arrunta $arruntum): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($arruntum->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Arrunta $arruntum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('arrunta_delete', array('id' => $arruntum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('arrunta_delete', ['id' => $arruntum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


6) src/Controller/AtalaController.php:38

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="atala_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $atalas = $this->repo->findAll();
@@ @@
             $adapter = new ArrayAdapter($atalas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($atalas as $atala) {
                 $deleteForms[$atala->getId()] = $this->createDeleteForm($atala)->createView();
             }
@@ @@
             } catch (\Pagerfanta\Exception\NotValidCurrentPageException $e) {
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }
-            return $this->render('atala/index.html.twig', array(
-                'atalas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('atala/index.html.twig', ['atalas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="atala_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('atala/new.html.twig', array(
-                'atala' => $atala,
-                'form' => $form->createView(),
-            ));
+            return $this->render('atala/new.html.twig', ['atala' => $atala, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="atala_show")
      * @Method("GET")
      */
-    public function showAction(Atala $atala)
+    public function show(Atala $atala): Response
     {
         $deleteForm = $this->createDeleteForm($atala);

-        return $this->render('atala/show.html.twig', array(
-            'atala' => $atala,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('atala/show.html.twig', ['atala' => $atala, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="atala_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Atala $atala)
+    public function edit(Request $request, Atala $atala)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($atala->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($atala);
                 $this->em->flush();
     
-                return $this->redirectToRoute('atala_edit', array('id' => $atala->getId()));
+                return $this->redirectToRoute('atala_edit', ['id' => $atala->getId()]);
             }
     
-            return $this->render('atala/edit.html.twig', array(
-                'atala' => $atala,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('atala/edit.html.twig', ['atala' => $atala, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="atala_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Atala $atala)
+    public function delete(Request $request, Atala $atala): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($atala->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Atala $atala)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('atala_delete', array('id' => $atala->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('atala_delete', ['id' => $atala->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


7) src/Controller/AtalaparrafoaController.php:33

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="atalaparrafoa_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index()
     {
         if ($this->isGranted('ROLE_ADMIN')) {
             $atalaparrafoas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($atalaparrafoas as $parrafoa) {
                 $deleteForms[$parrafoa->getId()] = $this->createDeleteForm($parrafoa)->createView();
             }

-            return $this->render('atalaparrafoa/index.html.twig', array(
-                'atalaparrafoas' => $atalaparrafoas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('atalaparrafoa/index.html.twig', ['atalaparrafoas' => $atalaparrafoas, 'deleteforms' => $deleteForms]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="atalaparrafoa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN')) {
             $atalaparrafoa = new Atalaparrafoa();
@@ @@
                 $this->em->persist($atalaparrafoa);
                 $this->em->flush();

-                return $this->redirectToRoute('atalaparrafoa_show', array('id' => $atalaparrafoa->getId()));
+                return $this->redirectToRoute('atalaparrafoa_show', ['id' => $atalaparrafoa->getId()]);
             } else
             {
                 $form->getData()->setUdala($this->getUser()->getUdala());
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('atalaparrafoa/new.html.twig', array(
-                'atalaparrafoa' => $atalaparrafoa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('atalaparrafoa/new.html.twig', ['atalaparrafoa' => $atalaparrafoa, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="atalaparrafoa_show")
      * @Method("GET")
      */
-    public function showAction(Atalaparrafoa $atalaparrafoa)
+    public function show(Atalaparrafoa $atalaparrafoa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($atalaparrafoa);

-        return $this->render('atalaparrafoa/show.html.twig', array(
-            'atalaparrafoa' => $atalaparrafoa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('atalaparrafoa/show.html.twig', ['atalaparrafoa' => $atalaparrafoa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="atalaparrafoa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Atalaparrafoa $atalaparrafoa)
+    public function edit(Request $request, Atalaparrafoa $atalaparrafoa)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($atalaparrafoa->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($atalaparrafoa);
                 $this->em->flush();

-                return $this->redirectToRoute('atalaparrafoa_edit', array('id' => $atalaparrafoa->getId()));
+                return $this->redirectToRoute('atalaparrafoa_edit', ['id' => $atalaparrafoa->getId()]);
             }

-            return $this->render('atalaparrafoa/edit.html.twig', array(
-                'atalaparrafoa' => $atalaparrafoa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('atalaparrafoa/edit.html.twig', ['atalaparrafoa' => $atalaparrafoa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="atalaparrafoa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Atalaparrafoa $atalaparrafoa)
+    public function delete(Request $request, Atalaparrafoa $atalaparrafoa): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($atalaparrafoa->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Atalaparrafoa $atalaparrafoa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('atalaparrafoa_delete', array('id' => $atalaparrafoa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('atalaparrafoa_delete', ['id' => $atalaparrafoa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


8) src/Controller/AurreikusiController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="aurreikusi_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA'))
         {
@@ @@
             $adapter = new ArrayAdapter($aurreikusis);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($aurreikusis as $aurreikusi) {
                 $deleteForms[$aurreikusi->getId()] = $this->createDeleteForm($aurreikusi)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('aurreikusi/index.html.twig', array(
-                'aurreikusis' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('aurreikusi/index.html.twig', ['aurreikusis' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="aurreikusi_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('aurreikusi/new.html.twig', array(
-                'aurreikusi' => $aurreikusi,
-                'form' => $form->createView(),
-            ));
+            return $this->render('aurreikusi/new.html.twig', ['aurreikusi' => $aurreikusi, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="aurreikusi_show")
      * @Method("GET")
      */
-    public function showAction(Aurreikusi $aurreikusi)
+    public function show(Aurreikusi $aurreikusi): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($aurreikusi);

-        return $this->render('aurreikusi/show.html.twig', array(
-            'aurreikusi' => $aurreikusi,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('aurreikusi/show.html.twig', ['aurreikusi' => $aurreikusi, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="aurreikusi_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Aurreikusi $aurreikusi)
+    public function edit(Request $request, Aurreikusi $aurreikusi)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($aurreikusi->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($aurreikusi);
                 $this->em->flush();

-                return $this->redirectToRoute('aurreikusi_edit', array('id' => $aurreikusi->getId()));
+                return $this->redirectToRoute('aurreikusi_edit', ['id' => $aurreikusi->getId()]);
             }

-            return $this->render('aurreikusi/edit.html.twig', array(
-                'aurreikusi' => $aurreikusi,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('aurreikusi/edit.html.twig', ['aurreikusi' => $aurreikusi, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="aurreikusi_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Aurreikusi $aurreikusi)
+    public function delete(Request $request, Aurreikusi $aurreikusi): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($aurreikusi->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Aurreikusi $aurreikusi)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('aurreikusi_delete', array('id' => $aurreikusi->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('aurreikusi_delete', ['id' => $aurreikusi->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


9) src/Controller/AzpiatalaController.php:39

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="azpiatala_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_ADMIN')) {
-            $azpiatalas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $azpiatalas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

             $adapter = new ArrayAdapter($azpiatalas);
             $pagerfanta = new Pagerfanta($adapter);


-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($azpiatalas as $azpiatala) {
                 $deleteForms[$azpiatala->getId()] = $this->createDeleteForm($azpiatala)->createView();
             }
@@ @@



-            return $this->render('azpiatala/index.html.twig', array(
-//                'azpiatalas' => $azpiatalas,
+            return $this->render('azpiatala/index.html.twig', [
+                //                'azpiatalas' => $azpiatalas,
                 'azpiatalas' => $entities,
                 'deleteforms' => $deleteForms,
                 'pager' => $pagerfanta,
-            ));
+            ]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/new", name="azpiatala_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $this->em->persist($azpiatala);
                 $this->em->flush();

-                return $this->redirectToRoute('azpiatala_show', array('id' => $azpiatala->getId()));
+                return $this->redirectToRoute('azpiatala_show', ['id' => $azpiatala->getId()]);
             } else
             {
                 $form->getData()->setUdala($this->getUser()->getUdala());
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('azpiatala/new.html.twig', array(
-                'azpiatala' => $azpiatala,
-                'form' => $form->createView(),
-            ));
+            return $this->render('azpiatala/new.html.twig', ['azpiatala' => $azpiatala, 'form' => $form->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="azpiatala_show")
      * @Method("GET")
      */
-    public function showAction(Azpiatala $azpiatala)
+    public function show(Azpiatala $azpiatala): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($azpiatala);

-        return $this->render('azpiatala/show.html.twig', array(
-            'azpiatala' => $azpiatala,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('azpiatala/show.html.twig', ['azpiatala' => $azpiatala, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="azpiatala_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Azpiatala $azpiatala)
+    public function edit(Request $request, Azpiatala $azpiatala)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpiatala->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($azpiatala);
                 $this->em->flush();

-                return $this->redirectToRoute('azpiatala_edit', array('id' => $azpiatala->getId()));
+                return $this->redirectToRoute('azpiatala_edit', ['id' => $azpiatala->getId()]);
             }

-            return $this->render('azpiatala/edit.html.twig', array(
-                'azpiatala' => $azpiatala,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('azpiatala/edit.html.twig', ['azpiatala' => $azpiatala, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
 //            return $this->redirectToRoute('fitxa_index');
@@ @@
      * @Route("/{id}", name="azpiatala_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Azpiatala $azpiatala)
+    public function delete(Request $request, Azpiatala $azpiatala): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpiatala->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Azpiatala $azpiatala)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('azpiatala_delete', array('id' => $azpiatala->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('azpiatala_delete', ['id' => $azpiatala->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


10) src/Controller/AzpiatalaparrafoaController.php:33

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="azpiatalaparrafoa_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index(): \Symfony\Component\HttpFoundation\Response
     {
         $azpiatalaparrafoas = $this->repo->findAll();

-        $deleteForms = array();
+        $deleteForms = [];
         foreach ($azpiatalaparrafoas as $azpiatalaparrafoa) {
             $deleteForms[$azpiatalaparrafoa->getId()] = $this->createDeleteForm($azpiatalaparrafoa)->createView();
         }

-        return $this->render('azpiatalaparrafoa/index.html.twig', array(
-            'azpiatalaparrafoas' => $azpiatalaparrafoas,
-            'deleteforms' => $deleteForms
-        ));
+        return $this->render('azpiatalaparrafoa/index.html.twig', ['azpiatalaparrafoas' => $azpiatalaparrafoas, 'deleteforms' => $deleteForms]);
     }

     /**
@@ @@
      * @Route("/new", name="azpiatalaparrafoa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN')) 
         {
@@ @@
                 $this->em->persist($azpiatalaparrafoa);
                 $this->em->flush();
     
-                return $this->redirectToRoute('azpiatalaparrafoa_show', array('id' => $azpiatalaparrafoa->getId()));
+                return $this->redirectToRoute('azpiatalaparrafoa_show', ['id' => $azpiatalaparrafoa->getId()]);
             } else
             {
                 $form->getData()->setUdala($this->getUser()->getUdala());
@@ @@
                 $form->setData($form->getData());
             }
     
-            return $this->render('azpiatalaparrafoa/new.html.twig', array(
-                'azpiatalaparrafoa' => $azpiatalaparrafoa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('azpiatalaparrafoa/new.html.twig', ['azpiatalaparrafoa' => $azpiatalaparrafoa, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="azpiatalaparrafoa_show")
      * @Method("GET")
      */
-    public function showAction(Azpiatalaparrafoa $azpiatalaparrafoa)
+    public function show(Azpiatalaparrafoa $azpiatalaparrafoa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($azpiatalaparrafoa);

-        return $this->render('azpiatalaparrafoa/show.html.twig', array(
-            'azpiatalaparrafoa' => $azpiatalaparrafoa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('azpiatalaparrafoa/show.html.twig', ['azpiatalaparrafoa' => $azpiatalaparrafoa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="azpiatalaparrafoa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Azpiatalaparrafoa $azpiatalaparrafoa)
+    public function edit(Request $request, Azpiatalaparrafoa $azpiatalaparrafoa)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpiatalaparrafoa->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($azpiatalaparrafoa);
                 $this->em->flush();

-                return $this->redirectToRoute('azpiatalaparrafoa_edit', array('id' => $azpiatalaparrafoa->getId()));
+                return $this->redirectToRoute('azpiatalaparrafoa_edit', ['id' => $azpiatalaparrafoa->getId()]);
             }

-            return $this->render('azpiatalaparrafoa/edit.html.twig', array(
-                'azpiatalaparrafoa' => $azpiatalaparrafoa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('azpiatalaparrafoa/edit.html.twig', ['azpiatalaparrafoa' => $azpiatalaparrafoa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="azpiatalaparrafoa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Azpiatalaparrafoa $azpiatalaparrafoa)
+    public function delete(Request $request, Azpiatalaparrafoa $azpiatalaparrafoa): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpiatalaparrafoa->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Azpiatalaparrafoa $azpiatalaparrafoa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('azpiatalaparrafoa_delete', array('id' => $azpiatalaparrafoa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('azpiatalaparrafoa_delete', ['id' => $azpiatalaparrafoa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


11) src/Controller/AzpisailaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="azpisaila_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA'))
         {
-            $azpisailas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $azpisailas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($azpisailas as $azpisaila) {
                 $deleteForms[$azpisaila->getId()] = $this->createDeleteForm($azpisaila)->createView();
             }

-            return $this->render('azpisaila/index.html.twig', array(
-                'azpisailas' => $azpisailas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('azpisaila/index.html.twig', ['azpisailas' => $azpisailas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');            
@@ @@
      * @Route("/new", name="azpisaila_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('azpisaila/new.html.twig', array(
-                'azpisaila' => $azpisaila,
-                'form' => $form->createView(),
-            ));
+            return $this->render('azpisaila/new.html.twig', ['azpisaila' => $azpisaila, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="azpisaila_show")
      * @Method("GET")
      */
-    public function showAction(Azpisaila $azpisaila)
+    public function show(Azpisaila $azpisaila): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($azpisaila);

-        return $this->render('azpisaila/show.html.twig', array(
-            'azpisaila' => $azpisaila,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('azpisaila/show.html.twig', ['azpisaila' => $azpisaila, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="azpisaila_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Azpisaila $azpisaila)
+    public function edit(Request $request, Azpisaila $azpisaila)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpisaila->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($azpisaila);
                 $this->em->flush();

-                return $this->redirectToRoute('azpisaila_edit', array('id' => $azpisaila->getId()));
+                return $this->redirectToRoute('azpisaila_edit', ['id' => $azpisaila->getId()]);
             }

-            return $this->render('azpisaila/edit.html.twig', array(
-                'azpisaila' => $azpisaila,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('azpisaila/edit.html.twig', ['azpisaila' => $azpisaila, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="azpisaila_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Azpisaila $azpisaila)
+    public function delete(Request $request, Azpisaila $azpisaila): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($azpisaila->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Azpisaila $azpisaila)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('azpisaila_delete', array('id' => $azpisaila->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('azpisaila_delete', ['id' => $azpisaila->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


12) src/Controller/BaldintzaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="baldintza_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $baldintzas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($baldintzas as $baldintza) {
                 $deleteForms[$baldintza->getId()] = $this->createDeleteForm($baldintza)->createView();
             }

-            return $this->render('baldintza/index.html.twig', array(
-                'baldintzas' => $baldintzas,
-                'deleteforms' => $deleteForms,
-            ));
+            return $this->render('baldintza/index.html.twig', ['baldintzas' => $baldintzas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="baldintza_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('baldintza/new.html.twig', array(
-                'baldintza' => $baldintza,
-                'form' => $form->createView(),
-            ));
+            return $this->render('baldintza/new.html.twig', ['baldintza' => $baldintza, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="baldintza_show")
      * @Method("GET")
      */
-    public function showAction(Baldintza $baldintza)
+    public function show(Baldintza $baldintza): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($baldintza);

-        return $this->render('baldintza/show.html.twig', array(
-            'baldintza' => $baldintza,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('baldintza/show.html.twig', ['baldintza' => $baldintza, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="baldintza_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Baldintza $baldintza)
+    public function edit(Request $request, Baldintza $baldintza)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($baldintza->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($baldintza);
                 $this->em->flush();

-                return $this->redirectToRoute('baldintza_edit', array('id' => $baldintza->getId()));
+                return $this->redirectToRoute('baldintza_edit', ['id' => $baldintza->getId()]);
             }

-            return $this->render('baldintza/edit.html.twig', array(
-                'baldintza' => $baldintza,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('baldintza/edit.html.twig', ['baldintza' => $baldintza, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="baldintza_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Baldintza $baldintza)
+    public function delete(Request $request, Baldintza $baldintza): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($baldintza->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Baldintza $baldintza)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('baldintza_delete', array('id' => $baldintza->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('baldintza_delete', ['id' => $baldintza->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


13) src/Controller/BarrutiaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="barrutia_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $barrutias = $this->repo->findAll();
@@ @@
             $adapter = new ArrayAdapter($barrutias);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($barrutias as $barrutia) {
                 $deleteForms[$barrutia->getId()] = $this->createDeleteForm($barrutia)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('barrutia/index.html.twig', array(
-                'barrutias' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('barrutia/index.html.twig', ['barrutias' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="barrutia_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('barrutia/new.html.twig', array(
-                'barrutium' => $barrutium,
-                'form' => $form->createView(),
-            ));
+            return $this->render('barrutia/new.html.twig', ['barrutium' => $barrutium, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="barrutia_show")
      * @Method("GET")
      */
-    public function showAction(Barrutia $barrutium)
+    public function show(Barrutia $barrutium): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($barrutium);

-        return $this->render('barrutia/show.html.twig', array(
-            'barrutium' => $barrutium,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('barrutia/show.html.twig', ['barrutium' => $barrutium, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="barrutia_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Barrutia $barrutium)
+    public function edit(Request $request, Barrutia $barrutium)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($barrutium->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($barrutium);
                 $this->em->flush();

-                return $this->redirectToRoute('barrutia_edit', array('id' => $barrutium->getId()));
+                return $this->redirectToRoute('barrutia_edit', ['id' => $barrutium->getId()]);
             }

-            return $this->render('barrutia/edit.html.twig', array(
-                'barrutium' => $barrutium,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('barrutia/edit.html.twig', ['barrutium' => $barrutium, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="barrutia_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Barrutia $barrutium)
+    public function delete(Request $request, Barrutia $barrutium): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($barrutium->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Barrutia $barrutium)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('barrutia_delete', array('id' => $barrutium->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('barrutia_delete', ['id' => $barrutium->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


14) src/Controller/Besteak1Controller.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="besteak1_index_paginated") 
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $besteak1s = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $besteak1s = $this->repo->findBy( [], ['kodea'=>'ASC'] );
             
-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($besteak1s as $besteak1) {
                 $deleteForms[$besteak1->getId()] = $this->createDeleteForm($besteak1)->createView();
             }

-            return $this->render('besteak1/index.html.twig', array(
-                'besteak1s' => $besteak1s,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('besteak1/index.html.twig', ['besteak1s' => $besteak1s, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="besteak1_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('besteak1/new.html.twig', array(
-                'besteak1' => $besteak1,
-                'form' => $form->createView(),
-            ));
+            return $this->render('besteak1/new.html.twig', ['besteak1' => $besteak1, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak1_show")
      * @Method("GET")
      */
-    public function showAction(Besteak1 $besteak1)
+    public function show(Besteak1 $besteak1): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($besteak1);

-        return $this->render('besteak1/show.html.twig', array(
-            'besteak1' => $besteak1,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('besteak1/show.html.twig', ['besteak1' => $besteak1, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="besteak1_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Besteak1 $besteak1)
+    public function edit(Request $request, Besteak1 $besteak1)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($besteak1->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($besteak1);
                 $this->em->flush();
     
-                return $this->redirectToRoute('besteak1_edit', array('id' => $besteak1->getId()));
+                return $this->redirectToRoute('besteak1_edit', ['id' => $besteak1->getId()]);
             }
     
-            return $this->render('besteak1/edit.html.twig', array(
-                'besteak1' => $besteak1,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('besteak1/edit.html.twig', ['besteak1' => $besteak1, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak1_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Besteak1 $besteak1)
+    public function delete(Request $request, Besteak1 $besteak1): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($besteak1->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Besteak1 $besteak1)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('besteak1_delete', array('id' => $besteak1->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('besteak1_delete', ['id' => $besteak1->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


15) src/Controller/Besteak2Controller.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="besteak2_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $besteak2s = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $besteak2s = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($besteak2s as $besteak2) {
                 $deleteForms[$besteak2->getId()] = $this->createDeleteForm($besteak2)->createView();
             }

-            return $this->render('besteak2/index.html.twig', array(
-                'besteak2s' => $besteak2s,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('besteak2/index.html.twig', ['besteak2s' => $besteak2s, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="besteak2_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         if ($this->isGranted('ROLE_ADMIN'))
         {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('besteak2/new.html.twig', array(
-                'besteak2' => $besteak2,
-                'form' => $form->createView(),
-            ));
+            return $this->render('besteak2/new.html.twig', ['besteak2' => $besteak2, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak2_show")
      * @Method("GET")
      */
-    public function showAction(Besteak2 $besteak2)
+    public function show(Besteak2 $besteak2): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($besteak2);

-        return $this->render('besteak2/show.html.twig', array(
-            'besteak2' => $besteak2,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('besteak2/show.html.twig', ['besteak2' => $besteak2, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="besteak2_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Besteak2 $besteak2)
+    public function edit(Request $request, Besteak2 $besteak2)
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($besteak2->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
                 $this->em->persist($besteak2);
                 $this->em->flush();

-                return $this->redirectToRoute('besteak2_edit', array('id' => $besteak2->getId()));
+                return $this->redirectToRoute('besteak2_edit', ['id' => $besteak2->getId()]);
             }

-            return $this->render('besteak2/edit.html.twig', array(
-                'besteak2' => $besteak2,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('besteak2/edit.html.twig', ['besteak2' => $besteak2, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak2_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Besteak2 $besteak2)
+    public function delete(Request $request, Besteak2 $besteak2): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         if((($this->isGranted('ROLE_ADMIN')) && ($besteak2->getUdala()==$this->getUser()->getUdala()))
             ||($this->isGranted('ROLE_SUPER_ADMIN')))
@@ @@
     private function createDeleteForm(Besteak2 $besteak2)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('besteak2_delete', array('id' => $besteak2->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('besteak2_delete', ['id' => $besteak2->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


16) src/Controller/Besteak3Controller.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="besteak3_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {
         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $besteak3s = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $besteak3s = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($besteak3s as $besteak3) {
                 $deleteForms[$besteak3->getId()] = $this->createDeleteForm($besteak3)->createView();
             }

-            return $this->render('besteak3/index.html.twig', array(
-                'besteak3s' => $besteak3s,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('besteak3/index.html.twig', ['besteak3s' => $besteak3s, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="besteak3_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('besteak3/new.html.twig', array(
-                'besteak3' => $besteak3,
-                'form' => $form->createView(),
-            ));
+            return $this->render('besteak3/new.html.twig', ['besteak3' => $besteak3, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak3_show")
      * @Method("GET")
      */
-    public function showAction(Besteak3 $besteak3)
+    public function show(Besteak3 $besteak3): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($besteak3);

-        return $this->render('besteak3/show.html.twig', array(
-            'besteak3' => $besteak3,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('besteak3/show.html.twig', ['besteak3' => $besteak3, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="besteak3_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Besteak3 $besteak3)
+    public function edit(Request $request, Besteak3 $besteak3)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($besteak3->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($besteak3);
                 $this->em->flush();

-                return $this->redirectToRoute('besteak3_edit', array('id' => $besteak3->getId()));
+                return $this->redirectToRoute('besteak3_edit', ['id' => $besteak3->getId()]);
             }

-            return $this->render('besteak3/edit.html.twig', array(
-                'besteak3' => $besteak3,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('besteak3/edit.html.twig', ['besteak3' => $besteak3, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="besteak3_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Besteak3 $besteak3)
+    public function delete(Request $request, Besteak3 $besteak3): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($besteak3->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Besteak3 $besteak3)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('besteak3_delete', array('id' => $besteak3->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('besteak3_delete', ['id' => $besteak3->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


17) src/Controller/DatuenbabesaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="datuenbabesa_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $datuenbabesas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $datuenbabesas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($datuenbabesas as $datuenbabesa) {
                 $deleteForms[$datuenbabesa->getId()] = $this->createDeleteForm($datuenbabesa)->createView();
             }

-            return $this->render('datuenbabesa/index.html.twig', array(
-                'datuenbabesas' => $datuenbabesas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('datuenbabesa/index.html.twig', ['datuenbabesas' => $datuenbabesas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="datuenbabesa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN')) 
@@ @@
                 $form->setData($form->getData());
             }
     
-            return $this->render('datuenbabesa/new.html.twig', array(
-                'datuenbabesa' => $datuenbabesa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('datuenbabesa/new.html.twig', ['datuenbabesa' => $datuenbabesa, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="datuenbabesa_show")
      * @Method("GET")
      */
-    public function showAction(Datuenbabesa $datuenbabesa)
+    public function show(Datuenbabesa $datuenbabesa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($datuenbabesa);

-        return $this->render('datuenbabesa/show.html.twig', array(
-            'datuenbabesa' => $datuenbabesa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('datuenbabesa/show.html.twig', ['datuenbabesa' => $datuenbabesa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="datuenbabesa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Datuenbabesa $datuenbabesa)
+    public function edit(Request $request, Datuenbabesa $datuenbabesa)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($datuenbabesa->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($datuenbabesa);
                 $this->em->flush();
     
-                return $this->redirectToRoute('datuenbabesa_edit', array('id' => $datuenbabesa->getId()));
+                return $this->redirectToRoute('datuenbabesa_edit', ['id' => $datuenbabesa->getId()]);
             }
     
-            return $this->render('datuenbabesa/edit.html.twig', array(
-                'datuenbabesa' => $datuenbabesa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('datuenbabesa/edit.html.twig', ['datuenbabesa' => $datuenbabesa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="datuenbabesa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Datuenbabesa $datuenbabesa)
+    public function delete(Request $request, Datuenbabesa $datuenbabesa): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($datuenbabesa->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Datuenbabesa $datuenbabesa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('datuenbabesa_delete', array('id' => $datuenbabesa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('datuenbabesa_delete', ['id' => $datuenbabesa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


18) src/Controller/DefaultController.php:12

    ---------- begin diff ----------
@@ @@
      *
      * @Route("/")
      */
-    public function indexAction()
+    public function index(): \Symfony\Component\HttpFoundation\Response
     {

 //        $query = $em->createQuery('
@@ @@
      *
      * @Route("/errorea")
      */
-    public function erroreaAction()
+    public function errorea(): \Symfony\Component\HttpFoundation\Response
     {
         return $this->render('App:Default:errorea.html.twig');
    ----------- end diff -----------

Applied rules:
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector


19) src/Controller/DoklagunController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="doklagun_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA'))
         {
-            $doklaguns = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $doklaguns = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($doklaguns as $doklagun) {
                 $deleteForms[$doklagun->getId()] = $this->createDeleteForm($doklagun)->createView();
             }

-            return $this->render('doklagun/index.html.twig', array(
-                'doklaguns' => $doklaguns,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('doklagun/index.html.twig', ['doklaguns' => $doklaguns, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="doklagun_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('doklagun/new.html.twig', array(
-                'doklagun' => $doklagun,
-                'form' => $form->createView(),
-            ));
+            return $this->render('doklagun/new.html.twig', ['doklagun' => $doklagun, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="doklagun_show")
      * @Method("GET")
      */
-    public function showAction(Doklagun $doklagun)
+    public function show(Doklagun $doklagun): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($doklagun);

-        return $this->render('doklagun/show.html.twig', array(
-            'doklagun' => $doklagun,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('doklagun/show.html.twig', ['doklagun' => $doklagun, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="doklagun_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Doklagun $doklagun)
+    public function edit(Request $request, Doklagun $doklagun)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($doklagun->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($doklagun);
                 $this->em->flush();

-                return $this->redirectToRoute('doklagun_edit', array('id' => $doklagun->getId()));
+                return $this->redirectToRoute('doklagun_edit', ['id' => $doklagun->getId()]);
             }

-            return $this->render('doklagun/edit.html.twig', array(
-                'doklagun' => $doklagun,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('doklagun/edit.html.twig', ['doklagun' => $doklagun, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="doklagun_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Doklagun $doklagun)
+    public function delete(Request $request, Doklagun $doklagun): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($doklagun->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Doklagun $doklagun)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('doklagun_delete', array('id' => $doklagun->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('doklagun_delete', ['id' => $doklagun->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


20) src/Controller/DokumentazioaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="dokumentazioa_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $dokumentazioas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $dokumentazioas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($dokumentazioas as $dokumentazioa) {
                 $deleteForms[$dokumentazioa->getId()] = $this->createDeleteForm($dokumentazioa)->createView();
             }

-            return $this->render('dokumentazioa/index.html.twig', array(
-                'dokumentazioas' => $dokumentazioas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('dokumentazioa/index.html.twig', ['dokumentazioas' => $dokumentazioas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="dokumentazioa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN')) 
@@ @@
                 $form->setData($form->getData());
             }
     
-            return $this->render('dokumentazioa/new.html.twig', array(
-                'dokumentazioa' => $dokumentazioa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('dokumentazioa/new.html.twig', ['dokumentazioa' => $dokumentazioa, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="dokumentazioa_show")
      * @Method("GET")
      */
-    public function showAction(Dokumentazioa $dokumentazioa)
+    public function show(Dokumentazioa $dokumentazioa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($dokumentazioa);

-        return $this->render('dokumentazioa/show.html.twig', array(
-            'dokumentazioa' => $dokumentazioa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('dokumentazioa/show.html.twig', ['dokumentazioa' => $dokumentazioa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="dokumentazioa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Dokumentazioa $dokumentazioa)
+    public function edit(Request $request, Dokumentazioa $dokumentazioa)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($dokumentazioa->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($dokumentazioa);
                 $this->em->flush();

-                return $this->redirectToRoute('dokumentazioa_edit', array('id' => $dokumentazioa->getId()));
+                return $this->redirectToRoute('dokumentazioa_edit', ['id' => $dokumentazioa->getId()]);
             }

-            return $this->render('dokumentazioa/edit.html.twig', array(
-                'dokumentazioa' => $dokumentazioa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('dokumentazioa/edit.html.twig', ['dokumentazioa' => $dokumentazioa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="dokumentazioa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Dokumentazioa $dokumentazioa)
+    public function delete(Request $request, Dokumentazioa $dokumentazioa): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($dokumentazioa->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Dokumentazioa $dokumentazioa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('dokumentazioa_delete', array('id' => $dokumentazioa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('dokumentazioa_delete', ['id' => $dokumentazioa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


21) src/Controller/DokumentumotaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="dokumentumota_index_paginated") 
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $dokumentumotas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $dokumentumotas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

             $adapter = new ArrayAdapter($dokumentumotas);
             $pagerfanta = new Pagerfanta($adapter);            
             
-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($dokumentumotas as $dokumentumota) {
                 $deleteForms[$dokumentumota->getId()] = $this->createDeleteForm($dokumentumota)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('dokumentumota/index.html.twig', array(
-                'dokumentumotas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,                
-            ));
+            return $this->render('dokumentumota/index.html.twig', ['dokumentumotas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="dokumentumota_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('dokumentumota/new.html.twig', array(
-                'dokumentumotum' => $dokumentumotum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('dokumentumota/new.html.twig', ['dokumentumotum' => $dokumentumotum, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="dokumentumota_show")
      * @Method("GET")
      */
-    public function showAction(Dokumentumota $dokumentumotum)
+    public function show(Dokumentumota $dokumentumotum): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($dokumentumotum);

-        return $this->render('dokumentumota/show.html.twig', array(
-            'dokumentumotum' => $dokumentumotum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('dokumentumota/show.html.twig', ['dokumentumotum' => $dokumentumotum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="dokumentumota_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Dokumentumota $dokumentumotum)
+    public function edit(Request $request, Dokumentumota $dokumentumotum)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($dokumentumotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($dokumentumotum);
                 $this->em->flush();
     
-                return $this->redirectToRoute('dokumentumota_edit', array('id' => $dokumentumotum->getId()));
+                return $this->redirectToRoute('dokumentumota_edit', ['id' => $dokumentumotum->getId()]);
             }
     
-            return $this->render('dokumentumota/edit.html.twig', array(
-                'dokumentumotum' => $dokumentumotum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('dokumentumota/edit.html.twig', ['dokumentumotum' => $dokumentumotum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="dokumentumota_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Dokumentumota $dokumentumotum)
+    public function delete(Request $request, Dokumentumota $dokumentumotum): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($dokumentumotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Dokumentumota $dokumentumotum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('dokumentumota_delete', array('id' => $dokumentumotum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('dokumentumota_delete', ['id' => $dokumentumotum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


22) src/Controller/EraikinaController.php:38

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="eraikina_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $eraikinas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($eraikinas as $eraikina) {
                 $deleteForms[$eraikina->getId()] = $this->createDeleteForm($eraikina)->createView();
             }

-            return $this->render('eraikina/index.html.twig', array(
-                'eraikinas' => $eraikinas,
-                'deleteforms' => $deleteForms,
-            ));
+            return $this->render('eraikina/index.html.twig', ['eraikinas' => $eraikinas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="eraikina_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('eraikina/new.html.twig', array(
-                'eraikina' => $eraikina,
-                'form' => $form->createView(),
-            ));
+            return $this->render('eraikina/new.html.twig', ['eraikina' => $eraikina, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="eraikina_show")
      * @Method("GET")
      */
-    public function showAction(Eraikina $eraikina)
+    public function show(Eraikina $eraikina): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($eraikina);

-        return $this->render('eraikina/show.html.twig', array(
-            'eraikina' => $eraikina,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('eraikina/show.html.twig', ['eraikina' => $eraikina, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      *
      * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
      */
-    public function editAction(Request $request, Eraikina $eraikina)
+    public function edit(Request $request, Eraikina $eraikina)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($eraikina->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($eraikina);
                 $this->em->flush();
     
-                return $this->redirectToRoute('eraikina_edit', array('id' => $eraikina->getId()));
+                return $this->redirectToRoute('eraikina_edit', ['id' => $eraikina->getId()]);
             }
     
-            return $this->render('eraikina/edit.html.twig', array(
-                'eraikina' => $eraikina,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('eraikina/edit.html.twig', ['eraikina' => $eraikina, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="eraikina_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Eraikina $eraikina)
+    public function delete(Request $request, Eraikina $eraikina): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($eraikina->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Eraikina $eraikina)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('eraikina_delete', array('id' => $eraikina->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('eraikina_delete', ['id' => $eraikina->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


23) src/Controller/EremuakController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="eremuak_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
             $adapter = new ArrayAdapter($eremuaks);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($eremuaks as $eremuak) {
                 $deleteForms[$eremuak->getId()] = $this->createDeleteForm($eremuak)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('eremuak/index.html.twig', array(
-                'eremuaks' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('eremuak/index.html.twig', ['eremuaks' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else if ($this->isGranted('ROLE_ADMIN'))
         {

@@ @@

             $eremuak=$this->getUser()->getUdala()->getEremuak();

-            return $this->redirectToRoute('eremuak_edit', array('id' => $eremuid['id']));
+            return $this->redirectToRoute('eremuak_edit', ['id' => $eremuid['id']]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="eremuak_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
                 return $this->redirectToRoute('eremuak_index');
             }

-            return $this->render('eremuak/new.html.twig', array(
-                'eremuak' => $eremuak,
-                'form' => $form->createView(),
-            ));
+            return $this->render('eremuak/new.html.twig', ['eremuak' => $eremuak, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="eremuak_show")
      * @Method("GET")
      */
-    public function showAction(Eremuak $eremuak)
+    public function show(Eremuak $eremuak): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($eremuak);

-        return $this->render('eremuak/show.html.twig', array(
-            'eremuak' => $eremuak,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('eremuak/show.html.twig', ['eremuak' => $eremuak, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="eremuak_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Eremuak $eremuak)
+    public function edit(Request $request, Eremuak $eremuak)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($eremuak->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($eremuak);
                 $this->em->flush();

-                return $this->redirectToRoute('eremuak_edit', array('id' => $eremuak->getId()));
+                return $this->redirectToRoute('eremuak_edit', ['id' => $eremuak->getId()]);
             }

-            return $this->render('eremuak/edit.html.twig', array(
-                'eremuak' => $eremuak,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('eremuak/edit.html.twig', ['eremuak' => $eremuak, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="eremuak_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Eremuak $eremuak)
+    public function delete(Request $request, Eremuak $eremuak): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
     private function createDeleteForm(Eremuak $eremuak)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('eremuak_delete', array('id' => $eremuak->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('eremuak_delete', ['id' => $eremuak->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


24) src/Controller/EspedientekudeaketaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="espedientekudeaketa_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN')) {
@@ @@
             $adapter = new ArrayAdapter($espedientekudeaketas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($espedientekudeaketas as $espedientekudeaketa) {
                 $deleteForms[$espedientekudeaketa->getId()] = $this->createDeleteForm($espedientekudeaketa)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('espedientekudeaketa/index.html.twig', array(
-                'espedientekudeaketas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('espedientekudeaketa/index.html.twig', ['espedientekudeaketas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="espedientekudeaketa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
                 return $this->redirectToRoute('espedientekudeaketa_index');
             }

-            return $this->render('espedientekudeaketa/new.html.twig', array(
-                'espedientekudeaketum' => $espedientekudeaketum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('espedientekudeaketa/new.html.twig', ['espedientekudeaketum' => $espedientekudeaketum, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="espedientekudeaketa_show")
      * @Method("GET")
      */
-    public function showAction(Espedientekudeaketa $espedientekudeaketum)
+    public function show(Espedientekudeaketa $espedientekudeaketum): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($espedientekudeaketum);

-        return $this->render('espedientekudeaketa/show.html.twig', array(
-            'espedientekudeaketum' => $espedientekudeaketum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('espedientekudeaketa/show.html.twig', ['espedientekudeaketum' => $espedientekudeaketum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="espedientekudeaketa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Espedientekudeaketa $espedientekudeaketum)
+    public function edit(Request $request, Espedientekudeaketa $espedientekudeaketum)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
                 $this->em->persist($espedientekudeaketum);
                 $this->em->flush();

-                return $this->redirectToRoute('espedientekudeaketa_edit', array('id' => $espedientekudeaketum->getId()));
+                return $this->redirectToRoute('espedientekudeaketa_edit', ['id' => $espedientekudeaketum->getId()]);
             }

-            return $this->render('espedientekudeaketa/edit.html.twig', array(
-                'espedientekudeaketum' => $espedientekudeaketum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('espedientekudeaketa/edit.html.twig', ['espedientekudeaketum' => $espedientekudeaketum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="espedientekudeaketa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Espedientekudeaketa $espedientekudeaketum)
+    public function delete(Request $request, Espedientekudeaketa $espedientekudeaketum): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
     private function createDeleteForm(Espedientekudeaketa $espedientekudeaketum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('espedientekudeaketa_delete', array('id' => $espedientekudeaketum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('espedientekudeaketa_delete', ['id' => $espedientekudeaketum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


25) src/Controller/EtiketaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="etiketa_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $etiketas = $this->repo->findBy( array(), array('etiketaeu'=>'ASC') );
+            $etiketas = $this->repo->findBy( [], ['etiketaeu'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($etiketas as $etiketa) {
                 $deleteForms[$etiketa->getId()] = $this->createDeleteForm($etiketa)->createView();
             }

-            return $this->render('etiketa/index.html.twig', array(
-                'etiketas' => $etiketas,
-                'deleteforms' => $deleteForms,
-            ));
+            return $this->render('etiketa/index.html.twig', ['etiketas' => $etiketas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="etiketa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('etiketa/new.html.twig', array(
-                'etiketum' => $etiketum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('etiketa/new.html.twig', ['etiketum' => $etiketum, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="etiketa_show")
      * @Method("GET")
      */
-    public function showAction(Etiketa $etiketum)
+    public function show(Etiketa $etiketum): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($etiketum);

-        return $this->render('etiketa/show.html.twig', array(
-            'etiketum' => $etiketum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('etiketa/show.html.twig', ['etiketum' => $etiketum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="etiketa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Etiketa $etiketum)
+    public function edit(Request $request, Etiketa $etiketum)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($etiketum->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($etiketum);
                 $this->em->flush();
     
-                return $this->redirectToRoute('etiketa_edit', array('id' => $etiketum->getId()));
+                return $this->redirectToRoute('etiketa_edit', ['id' => $etiketum->getId()]);
             }
     
-            return $this->render('etiketa/edit.html.twig', array(
-                'etiketum' => $etiketum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('etiketa/edit.html.twig', ['etiketum' => $etiketum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="etiketa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Etiketa $etiketum)
+    public function delete(Request $request, Etiketa $etiketum): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($etiketum->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Etiketa $etiketum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('etiketa_delete', array('id' => $etiketum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('etiketa_delete', ['id' => $etiketum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


26) src/Controller/FamiliaController.php:39

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="familia_index_paginated")
      * @Method("GET")
      */
-    public function indexAction ( $page )
+    public function index ( $page )
     {

         if ( $this->isGranted( 'ROLE_KUDEAKETA' ) ) {
             $familias = $this->repo->findBy(
-                array (),
-                array ( 'ordena' => 'ASC' )
+                [],
+                ['ordena' => 'ASC']
             );
-            $deleteForms = array ();
+            $deleteForms = [];
             foreach ( $familias as $familia ) {
                 $deleteForms[ $familia->getId() ] = $this->createDeleteForm( $familia )->createView();
             }
@@ @@

             return $this->render(
                 'familia/index.html.twig',
-                array (
-                    'familias'    => $familias,
-                    'deleteforms' => $deleteForms,
-                )
+                ['familias'    => $familias, 'deleteforms' => $deleteForms]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      * @Route("/new", name="familia_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction ( Request $request )
+    public function new ( Request $request )
     {

         if ( $this->isGranted( 'ROLE_ADMIN' ) ) {
@@ @@

             return $this->render(
                 'familia/new.html.twig',
-                array (
-                    'familium' => $familium,
-                    'form'     => $form->createView(),
-                )
+                ['familium' => $familium, 'form'     => $form->createView()]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      *
      * @Route("/{id}", name="familia_delete", methods={"DELETE"}, options={"expose"=true})
      */
-    public function deleteAction ( Request $request, Familia $familium )
+    public function delete ( Request $request, Familia $familium )
     {
         if ( $request->isXmlHttpRequest() ) {
             $this->em->remove( $familium );
             $this->em->flush();

-            return New JsonResponse( array ( 'result' => 'ok' ) );
+            return New JsonResponse( ['result' => 'ok'] );
         }


@@ @@
      * @Route("/{id}/edit", name="familia_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction ( Request $request, Familia $familium )
+    public function edit ( Request $request, Familia $familium )
     {

         if ( (($this->isGranted( 'ROLE_ADMIN' )) && ($familium->getUdala() == $this->getUser()->getUdala()))
@@ @@
                 $this->em->persist( $familium );
                 $this->em->flush();

-                return $this->redirectToRoute( 'familia_edit', array ( 'id' => $familium->getId() ) );
+                return $this->redirectToRoute( 'familia_edit', ['id' => $familium->getId()] );
             }

             $azpifamiliak = $this->repo->findBy(
-                array (
-                    'parent' => $familium->getId(),
-                )
+                ['parent' => $familium->getId()]
             );

             return $this->render(
                 'familia/edit.html.twig',
-                array (
-                    'familium'     => $familium,
-                    'edit_form'    => $editForm->createView(),
-                    'delete_form'  => $deleteForm->createView(),
-                    'azpifamiliak' => $azpifamiliak,
-                )
+                ['familium'     => $familium, 'edit_form'    => $editForm->createView(), 'delete_form'  => $deleteForm->createView(), 'azpifamiliak' => $azpifamiliak]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      * @Route("/{id}", name="familia_show")
      * @Method("GET")
      */
-    public function showAction ( Familia $familium )
+    public function show ( Familia $familium ): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm( $familium );

         return $this->render(
             'familia/show.html.twig',
-            array (
-                'familium'    => $familium,
-                'delete_form' => $deleteForm->createView(),
-            )
+            ['familium'    => $familium, 'delete_form' => $deleteForm->createView()]
         );
     }

@@ @@
     private function createDeleteForm ( Familia $familium )
     {
         return $this->createFormBuilder()
-            ->setAction( $this->generateUrl( 'familia_delete', array ( 'id' => $familium->getId() ) ) )
-            ->setMethod( 'DELETE' )
+            ->setAction( $this->generateUrl( 'familia_delete', ['id' => $familium->getId()] ) )
+            ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
             ->getForm();
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


27) src/Controller/FitxaController.php:56

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="fitxa_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index()
     {
         if ( $this->isGranted( 'ROLE_USER' ) ) {
             $fitxas = $this->repo->findAzpisailakOrderedBySailakAzpisailak();

-            $deleteForms = array();
+            $deleteForms = [];
             /** @var Fitxa $fitxa */
             foreach ( $fitxas as $fitxa ) {
                 $deleteForms[ $fitxa->getId() ] = $this->createDeleteForm( $fitxa )->createView();
@@ @@

             return $this->render(
                 'fitxa/index.html.twig',
-                array(
-                    'deleteforms' => $deleteForms,
-                    'fitxas'      => $fitxas,
-                )
+                ['deleteforms' => $deleteForms, 'fitxas'      => $fitxas]
             );
         } else {
             return $this->redirectToRoute( 'fos_user_security_login' );
@@ @@
      *
      * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
      */
-    public function newAction( Request $request )
+    public function new( Request $request )
     {
         if ( $this->isGranted( 'ROLE_USER' ) ) {
             /** @var \App\Entity\Fitxa $fitxa */
@@ @@
                 $this->em->flush();
                 $this->saveFitxaAldaketa($fitxa, 'Sortua');

-                return $this->redirectToRoute( 'fitxa_edit', array( 'id' => $fitxa->getId() ) );
+                return $this->redirectToRoute( 'fitxa_edit', ['id' => $fitxa->getId()] );
             } else {
                 $form->getData()->setUdala( $this->getUser()->getUdala() );
                 $form->setData( $form->getData() );
@@ @@

             return $this->render(
                 'fitxa/new.html.twig',
-                array(
-                    'fitxa' => $fitxa,
-                    'form'  => $form->createView(),
-                )
+                ['fitxa' => $fitxa, 'form'  => $form->createView()]
             );
         } else {
             return $this->redirectToRoute( 'fos_user_security_login' );
@@ @@
      *
      * @return \Symfony\Component\HttpFoundation\Response
      */
-    public function showAction( Fitxa $fitxa )
+    public function show( Fitxa $fitxa ): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm( $fitxa );

         $kanalmotak = $this->kanalmotaRepo->findAll();

-        $kostuZerrenda = array();
+        $kostuZerrenda = [];
         foreach ( $fitxa->getKostuak() as $kostu ) {
             $client = new GuzzleHttp\Client();
             $proba = $client->request( 'GET', $this->zzoo_aplikazioaren_API_url . '/zerga/' . $kostu->getKostua() . '.json' );
@@ @@

         return $this->render(
             'fitxa/show.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'kanalmotak'    => $kanalmotak,
-                'delete_form'   => $deleteForm->createView(),
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'kostuZerrenda' => $kostuZerrenda,
-            )
+            ['fitxa'         => $fitxa, 'kanalmotak'    => $kanalmotak, 'delete_form'   => $deleteForm->createView(), 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'kostuZerrenda' => $kostuZerrenda]
         );
     }

@@ @@
      * @Method("GET")
      */
     
-    public function pdfAllDokLagnAction ( $id = null ) {
+    public function pdfAllDokLagn ( $id = null ) {
 	$user = $this->getUser();
 	$roles = $user->getRoles();
 	$isRoleSuperAdmin = in_array("ROLE_SUPER_ADMIN", $roles);
@@ @@
 	);
 //	dump($udala);die;
 	$pdf = $this->__generateAllFitxaHTML($fitxak,'fitxa/pdf_dokumentazioa.html.twig');
-	
+
         $filename = "izapideen-liburua";
 	return $pdf->Output( $filename . ".pdf", 'I' ); // This will output the PDF as a response directly
     }
@@ @@
      * @Method("GET")
      */
     
-    public function pdfAllAction ( $id = null ) {
+    public function pdfAll ( $id = null ) {
 	$user = $this->getUser();
 	$roles = $user->getRoles();
 	$isRoleSuperAdmin = in_array("ROLE_SUPER_ADMIN", $roles);
@@ @@
 	);
 //	dump($udala);die;
 	$pdf = $this->__generateAllFitxaHTML($fitxak);
-	
+
         $filename = "izapideen-liburua";
 	return $pdf->Output( $filename . ".pdf", 'I' ); // This will output the PDF as a response directly
     }
@@ @@
         );
         $query->setParameter( 'udala', $udala );
         $labelak = $query->getSingleResult();
-	
+
         $pdf = $this->tcpdfController->create('vertical',PDF_UNIT, PDF_PAGE_FORMAT,true,'UTF-8', false);
         $pdf->SetAuthor( $this->getUser()->getUdala() );
         $pdf->SetTitle( ( "Izapideen Liburua" ) );
@@ @@
         $pdf->SetSubject( "Libro de procedimientos" );
         $pdf->setFontSubsetting( true );
 	$pdf->SetFont( 'helvetica', '', 11, '', true );
-	
+
 //	$full_html = '';
 	foreach ($fitxak as $fitxa ) {
 	    $this->logger->debug($fitxa->getEspedienteKodea());
-	    $kostuZerrenda = array();
+	    $kostuZerrenda = [];
 	    foreach ( $fitxa->getKostuak() as $kostu ) {
 		$this->logger->info($kostu->getId());
 		$client = new GuzzleHttp\Client();
@@ @@
 //	    return $this->render(
 	    $html = $this->render(
 		$plantilla,
-		array(
-		    'fitxa'         => $fitxa,
-		    'kanalmotak'    => $kanalmotak,
-//		    'delete_form'   => $deleteForm->createView(),
-		    'eremuak'       => $eremuak,
-		    'labelak'       => $labelak,
-		    'kostuZerrenda' => $kostuZerrenda,
-		)
+		[
+      'fitxa'         => $fitxa,
+      'kanalmotak'    => $kanalmotak,
+      //		    'delete_form'   => $deleteForm->createView(),
+      'eremuak'       => $eremuak,
+      'labelak'       => $labelak,
+      'kostuZerrenda' => $kostuZerrenda,
+  ]
 	    );
 	    $pdf->AddPage();
 	    $pdf->writeHTML($html->getContent(), true, false, false, false, '');
@@ @@
      * @Method("GET")
      * @param Fitxa $fitxa
      */
-    public function pdfAction( Fitxa $fitxa )
+    public function pdf( Fitxa $fitxa )
     {
         $deleteForm = $this->createDeleteForm( $fitxa );

@@ @@
         $query->setParameter( 'udala', $fitxa->getUdala() );
         $labelak = $query->getSingleResult();

-        $kostuZerrenda = array();
+        $kostuZerrenda = [];
         foreach ( $fitxa->getKostuak() as $kostu ) {
             $client = new GuzzleHttp\Client();

@@ @@
         //return $this->render(
         $html = $this->render(
             'fitxa/pdf.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'kanalmotak'    => $kanalmotak,
-                'delete_form'   => $deleteForm->createView(),
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'kostuZerrenda' => $kostuZerrenda,
-            )
+            ['fitxa'         => $fitxa, 'kanalmotak'    => $kanalmotak, 'delete_form'   => $deleteForm->createView(), 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'kostuZerrenda' => $kostuZerrenda]
         );

         $pdf = $this->tcpdfController->create(
@@ @@
      *
      * @return \Symfony\Component\HttpFoundation\RedirectResponse|\Symfony\Component\HttpFoundation\Response
      */
-    public function editAction( Request $request, Fitxa $fitxa )
+    public function edit( Request $request, Fitxa $fitxa )
     {
         if ( ( ( $this->isGranted( 'ROLE_USER' ) ) && ( $fitxa->getUdala() == $this->getUser()->getUdala() ) )
             || ( $this->isGranted( 'ROLE_SUPER_ADMIN' ) )
@@ @@
             $editForm = $this->createForm(
                 FitxaType::class,
                 $fitxa,
-                array( 'user' => $this->getUser(), 'api_url' => $this->zzoo_aplikazioaren_API_url )
+                ['user' => $this->getUser(), 'api_url' => $this->zzoo_aplikazioaren_API_url]
             );

             // Create an ArrayCollection of the current Kostuak objects in the database
@@ @@
                 $this->em->flush();
                 $this->saveFitxaAldaketa($fitxa, 'Aldatua');

-                return $this->redirectToRoute( 'fitxa_edit', array( 'id' => $fitxa->getId() ) );
+                return $this->redirectToRoute( 'fitxa_edit', ['id' => $fitxa->getId()] );
             }

             /** @var Query $query */
@@ @@
             );

             $familiak = $this->familiaRepo->findBy(
-                array(
-                    'udala'  => $fitxa->getUdala(),
-                    'parent' => null,
-                ),
-                array( 'ordena' => 'ASC' )
+                ['udala'  => $fitxa->getUdala(), 'parent' => null],
+                ['ordena' => 'ASC']
             );

             return $this->render(
                 'fitxa/edit.html.twig',
-                array(
-                    'fitxa'            => $fitxa,
-                    'udala'            => $this->getUser()->getUdala() != null ? $this->getUser()->getUdala()->getId() : null,
-                    'udal'             => $this->getUser()->getUdala(),
-                    'edit_form'        => $editForm->createView(),
-                    'delete_form'      => $deleteForm->createView(),
-                    'formfitxafamilia' => $form->createView(),
-                    'eremuak'          => $eremuak,
-                    'labelak'          => $labelak,
-                    'familiak'         => $familiak,
-                )
+                ['fitxa'            => $fitxa, 'udala'            => $this->getUser()->getUdala() != null ? $this->getUser()->getUdala()->getId() : null, 'udal'             => $this->getUser()->getUdala(), 'edit_form'        => $editForm->createView(), 'delete_form'      => $deleteForm->createView(), 'formfitxafamilia' => $form->createView(), 'eremuak'          => $eremuak, 'labelak'          => $labelak, 'familiak'         => $familiak]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      *
      * @return \Symfony\Component\HttpFoundation\RedirectResponse
      */
-    public function deleteAction( Request $request, Fitxa $fitxa )
+    public function delete( Request $request, Fitxa $fitxa ): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         //udala egokia den eta admin baimena duen egiaztatu
@@ @@
     private function createDeleteForm( Fitxa $fitxa )
     {
         return $this->createFormBuilder()
-                    ->setAction( $this->generateUrl( 'fitxa_delete', array( 'id' => $fitxa->getId() ) ) )
-                    ->setMethod( 'DELETE' )
+                    ->setAction( $this->generateUrl( 'fitxa_delete', ['id' => $fitxa->getId()] ) )
+                    ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
                     ->getForm();
     }

@@ @@
     private function createfamiliaDeleteForm( Familia $familia )
     {
         return $this->createFormBuilder()
-                    ->setAction( $this->generateUrl( 'familia_delete', array( 'id' => $familia->getId() ) ) )
-                    ->setMethod( 'DELETE' )
+                    ->setAction( $this->generateUrl( 'familia_delete', ['id' => $familia->getId()] ) )
+                    ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
                     ->getForm();
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


28) src/Controller/FitxaProzeduraController.php:33

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="fitxaprozedura_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index(): \Symfony\Component\HttpFoundation\Response
     {
         $fitxaProzeduras = $this->repo->findAll();

-        return $this->render('fitxaprozedura/index.html.twig', array(
-            'fitxaProzeduras' => $fitxaProzeduras,
-        ));
+        return $this->render('fitxaprozedura/index.html.twig', ['fitxaProzeduras' => $fitxaProzeduras]);
     }

     /**
@@ @@
      * @Route("/new", name="fitxaprozedura_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {
         $fitxaProzedura = new FitxaProzedura();
         $form = $this->createForm(FitxaProzeduraType::class, $fitxaProzedura);
@@ @@
             $this->em->persist($fitxaProzedura);
             $this->em->flush();

-            return $this->redirectToRoute('fitxaprozedura_show', array('id' => $fitxaProzedura->getId()));
+            return $this->redirectToRoute('fitxaprozedura_show', ['id' => $fitxaProzedura->getId()]);
         } else
         {
             $form->getData()->setUdala($this->getUser()->getUdala());
@@ @@
             $form->setData($form->getData());
         }

-        return $this->render('fitxaprozedura/new.html.twig', array(
-            'fitxaProzedura' => $fitxaProzedura,
-            'form' => $form->createView(),
-        ));
+        return $this->render('fitxaprozedura/new.html.twig', ['fitxaProzedura' => $fitxaProzedura, 'form' => $form->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}", name="fitxaprozedura_show")
      * @Method("GET")
      */
-    public function showAction(FitxaProzedura $fitxaProzedura)
+    public function show(FitxaProzedura $fitxaProzedura): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($fitxaProzedura);

-        return $this->render('fitxaprozedura/show.html.twig', array(
-            'fitxaProzedura' => $fitxaProzedura,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('fitxaprozedura/show.html.twig', ['fitxaProzedura' => $fitxaProzedura, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="fitxaprozedura_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, FitxaProzedura $fitxaProzedura)
+    public function edit(Request $request, FitxaProzedura $fitxaProzedura)
     {
         $deleteForm = $this->createDeleteForm($fitxaProzedura);
         $editForm = $this->createForm(FitxaProzeduraType::class, $fitxaProzedura);
@@ @@
             $this->em->persist($fitxaProzedura);
             $this->em->flush();

-            return $this->redirectToRoute('fitxaprozedura_edit', array('id' => $fitxaProzedura->getId()));
+            return $this->redirectToRoute('fitxaprozedura_edit', ['id' => $fitxaProzedura->getId()]);
         }

-        return $this->render('fitxaprozedura/edit.html.twig', array(
-            'fitxaProzedura' => $fitxaProzedura,
-            'edit_form' => $editForm->createView(),
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('fitxaprozedura/edit.html.twig', ['fitxaProzedura' => $fitxaProzedura, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);

     }

@@ @@
      * @Route("/{id}", name="fitxaprozedura_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, FitxaProzedura $fitxaProzedura)
+    public function delete(Request $request, FitxaProzedura $fitxaProzedura): \Symfony\Component\HttpFoundation\RedirectResponse
     {
         $form = $this->createDeleteForm($fitxaProzedura);
         $form->handleRequest($request);
@@ @@
     private function createDeleteForm(FitxaProzedura $fitxaProzedura)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('fitxaprozedura_delete', array('id' => $fitxaProzedura->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('fitxaprozedura_delete', ['id' => $fitxaProzedura->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


29) src/Controller/FitxafamiliaController.php:35

    ---------- begin diff ----------
@@ @@
      * @Route("/api/fitxafamiliakordenadauka/{id}/{fitxa_id}/{familia_id}", name="api_fitxafamiliahasorden", options={"expose"=true})
      * @Method("GET")
      */
-    public function fitxafamiliahasordenAction ( $id, $fitxa_id, $familia_id )
+    public function fitxafamiliahasorden ( $id, $fitxa_id, $familia_id )
     {
         /** @var Fitxafamilia $fitxafamilia */
         $fitxafamilia = $this->repo->find( $id );
         if ( $fitxafamilia ) {
-            $resp = array ('ordena' => $fitxafamilia->getOrdena());
+            $resp = ['ordena' => $fitxafamilia->getOrdena()];
         } else {
             $query = $this->em->createQuery(
                 '
@@ @@
      * @Route("/api/fitxafamilianextorden/{fitxa_id}/{familia_id}", name="api_fitxafamilianextorden", options={"expose"=true})
      * @Method("GET")
      */
-    public function fitxafamilianextordenAction ( $fitxa_id, $familia_id )
+    public function fitxafamilianextorden ( $fitxa_id, $familia_id )
     {
         // 1-. Badagoen begiratu

         $fitxafamilia = $this->repo->findOneBy(
-            array ('fitxa' => $fitxa_id, 'familia' => $familia_id)
+            ['fitxa' => $fitxa_id, 'familia' => $familia_id]
         );

         if ($fitxafamilia) {
-            return new JsonResponse(array('ordena'=>-1));
+            return new JsonResponse(['ordena'=>-1]);
         }

         $query = $this->em->createQuery(
@@ @@
      * @Route("/", name="fitxafamilia_index")
      * @Method("GET")
      */
-    public function indexAction ()
+    public function index (): \Symfony\Component\HttpFoundation\Response
     {
         $fitxafamilias = $this->repo->findAll();

         return $this->render(
             'fitxafamilia/index.html.twig',
-            array (
-                'fitxafamilias' => $fitxafamilias,
-            )
+            ['fitxafamilias' => $fitxafamilias]
         );
     }

@@ @@
      * @Route("/newfromfitxa", name="fitxafamilia_newfromfitxa")
      * @Method({"GET", "POST"})
      */
-    public function newfromfitxaAction ( Request $request )
+    public function newfromfitxa ( Request $request )
     {
         $fitxafamilium = new Fitxafamilia();
         $fitxafamilium->setUdala( $this->getUser()->getUdala() );
@@ @@
             return $this->redirect(
                 $this->generateUrl(
                     'fitxa_edit',
-                    array ('id' => $fitxafamilium->getFitxa()->getId())
+                    ['id' => $fitxafamilium->getFitxa()->getId()]
                 ).'#gehituFamilia'
             );
         }
@@ @@

         return $this->render(
             'fitxafamilia/new.html.twig',
-            array (
-                'fitxafamilium' => $fitxafamilium,
-                'form'          => $form->createView(),
-            )
+            ['fitxafamilium' => $fitxafamilium, 'form'          => $form->createView()]
         );
     }

@@ @@
      * @Route("/new", name="fitxafamilia_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction ( Request $request )
+    public function new ( Request $request )
     {
         $fitxafamilium = new Fitxafamilia();
         $fitxafamilium->setUdala( $this->getUser()->getUdala() );
@@ @@
             $this->em->persist( $fitxafamilium );
             $this->em->flush();

-            return $this->redirectToRoute( 'fitxafamilia_show', array ('id' => $fitxafamilium->getId()) );
+            return $this->redirectToRoute( 'fitxafamilia_show', ['id' => $fitxafamilium->getId()] );
         }

         return $this->render(
             'fitxafamilia/new.html.twig',
-            array (
-                'fitxafamilium' => $fitxafamilium,
-                'form'          => $form->createView(),
-            )
+            ['fitxafamilium' => $fitxafamilium, 'form'          => $form->createView()]
         );
     }

@@ @@
      * @Route("/{id}", name="fitxafamilia_show")
      * @Method("GET")
      */
-    public function showAction ( Fitxafamilia $fitxafamilium )
+    public function show ( Fitxafamilia $fitxafamilium ): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm( $fitxafamilium );

         return $this->render(
             'fitxafamilia/show.html.twig',
-            array (
-                'fitxafamilium' => $fitxafamilium,
-                'delete_form'   => $deleteForm->createView(),
-            )
+            ['fitxafamilium' => $fitxafamilium, 'delete_form'   => $deleteForm->createView()]
         );
     }

@@ @@
      * @Route("/{id}/edit", name="fitxafamilia_edit", options={"expose"=true})
      * @Method({"GET", "POST"})
      */
-    public function editAction ( Request $request, Fitxafamilia $fitxafamilium )
+    public function edit ( Request $request, Fitxafamilia $fitxafamilium )
     {
         $deleteForm = $this->createDeleteForm( $fitxafamilium );
         $editForm = $this->createForm(
-            'App\Form\FitxafamiliaType',
+            \App\Form\FitxafamiliaType::class,
             $fitxafamilium,
             [
                 'action' => $this->generateUrl(
                     'fitxafamilia_edit',
-                    array ('id' => $fitxafamilium->getFitxa()->getId())
+                    ['id' => $fitxafamilium->getFitxa()->getId()]
                 ),
                 'method' => "POST",
             ]
@@ @@
             return $this->redirect(
                 $this->generateUrl(
                     'fitxa_edit',
-                    array ('id' => $fitxafamilium->getFitxa()->getId())
+                    ['id' => $fitxafamilium->getFitxa()->getId()]
                 ).'#gehituFamilia'
             );
         }
@@ @@

         return $this->render(
             'fitxafamilia/edit.html.twig',
-            array (
-                'fitxafamilium' => $fitxafamilium,
-                'edit_form'     => $editForm->createView(),
-                'delete_form'   => $deleteForm->createView(),
-            )
+            ['fitxafamilium' => $fitxafamilium, 'edit_form'     => $editForm->createView(), 'delete_form'   => $deleteForm->createView()]
         );
     }

@@ @@
      * @Route("/{id}", name="fitxafamilia_delete", options={"expose"=true})
      * @Method("DELETE")
      */
-    public function deleteAction ( Request $request, Fitxafamilia $fitxafamilium )
+    public function delete ( Request $request, Fitxafamilia $fitxafamilium )
     {
         if($request->isXmlHttpRequest()) {
             $this->em->remove( $fitxafamilium );
             $this->em->flush();
-            return New JsonResponse(array('result' => 'ok'));
+            return New JsonResponse(['result' => 'ok']);
         }
         $form = $this->createDeleteForm( $fitxafamilium );
         $form->handleRequest( $request );
@@ @@
     private function createDeleteForm ( Fitxafamilia $fitxafamilium )
     {
         return $this->createFormBuilder()
-            ->setAction( $this->generateUrl( 'fitxafamilia_delete', array ('id' => $fitxafamilium->getId()) ) )
-            ->setMethod( 'DELETE' )
+            ->setAction( $this->generateUrl( 'fitxafamilia_delete', ['id' => $fitxafamilium->getId()] ) )
+            ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
             ->getForm();
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


30) src/Controller/FrontendController.php:54

    ---------- begin diff ----------
@@ @@
      *     }
      * )
      */
-    public function indexAction ( $udala, Request $request )
+    public function index ( int $udala, Request $request ): \Symfony\Component\HttpFoundation\Response
     {
-        $familia = $request->get('familia') !== null? $request->get('familia'): null;
-        $azpisaila = $request->get('azpisaila') !== null? $request->get('azpisaila'): null ;
+        $familia = $request->get('familia') ?? null;
+        $azpisaila = $request->get('azpisaila') ?? null ;

         $fitxak = $this->fitxaRepo->findPublicByUdalaAndAzpisaila($udala, $azpisaila);
         $familiak = $this->familiaRepo->findByUdalaAndParentAndFamiliaId($udala, $request->getLocale(), null, $familia);
@@ @@

         return $this->render(
             'frontend\index.html.twig',
-            array(
-                'fitxak'   => $fitxak,
-                'familiak' => $familiak,
-                'sailak'   => $sailak,
-                'udala'    => $udala,
-            )
+            ['fitxak'   => $fitxak, 'familiak' => $familiak, 'sailak'   => $sailak, 'udala'    => $udala]
         );
     }

@@ @@
      * )
      * @Method("GET")
      */
-    public function showAction ( Fitxa $fitxa, $udala )
+    public function show ( Fitxa $fitxa, int $udala ): \Symfony\Component\HttpFoundation\Response
     {
         $kanalmotak = $this->kanalmotaRepo->findAll();
         $eremuak = $this->eremuakRepo->findOneByUdalKodea($udala);
         $labelak = $this->eremuakRepo->findLabelakByUdalKodea($udala);

-        $kostuZerrenda = array();
+        $kostuZerrenda = [];
         foreach ( $fitxa->getKostuak() as $kostu ) {
             $client = new GuzzleHttp\Client();
             $proba  = $client->request( 'GET', $this->zzoo_aplikazioaren_API_url . '/zerga/' . $kostu->getKostua() . '.json' );
@@ @@

         return $this->render(
             'frontend/show.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'kanalmotak'    => $kanalmotak,
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'udala'         => $udala,
-                'kostuZerrenda' => $kostuZerrenda,
-            )
+            ['fitxa'         => $fitxa, 'kanalmotak'    => $kanalmotak, 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'udala'         => $udala, 'kostuZerrenda' => $kostuZerrenda]
         );
     }

@@ @@
      * @Route("/{udala}/{_locale}/pdf/{id}/doklagun", name="frontend_pdf_doklagun")
      * @Method("GET")
      */
-    public function pdfDocLagunAction ( Fitxa $fitxa, $udala )
+    public function pdfDocLagun ( Fitxa $fitxa, $udala )
     {
         $eremuak = $this->eremuakRepo->findOneByUdalKodea($udala);
         $labelak = $this->eremuakRepo->findLabelakByUdalKodea($udala);
         $html = $this->render(
             'frontend/pdf_dokumentazioa.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'udala'         => $udala,
-            )
+            ['fitxa'         => $fitxa, 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'udala'         => $udala]
         );

         $pdf = $this->tcpdfController->create(
@@ @@
      * @Route("/{udala}/{_locale}/pdf/{id}", name="frontend_fitxa_pdf")
      * @Method("GET")
      */
-    public function pdfAction ( Fitxa $fitxa, $udala )
+    public function pdf ( Fitxa $fitxa, $udala )
     {
         $kanalmotak = $this->kanalmotaRepo->findAll();
         $eremuak = $this->eremuakRepo->findOneByUdalKodea($udala);
         $labelak = $this->eremuakRepo->findLabelakByUdalKodea($udala);

-        $kostuZerrenda = array();
+        $kostuZerrenda = [];
         foreach ( $fitxa->getKostuak() as $kostu ) {
             $client = new GuzzleHttp\Client();
             $proba  = $client->request( 'GET', $this->zzoo_aplikazioaren_API_url . '/zerga/' . $kostu->getKostua() . '.json' );
@@ @@

         $html = $this->render(
             'frontend/pdf.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'kanalmotak'    => $kanalmotak,
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'udala'         => $udala,
-                'kostuZerrenda' => $kostuZerrenda,
-            )
+            ['fitxa'         => $fitxa, 'kanalmotak'    => $kanalmotak, 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'udala'         => $udala, 'kostuZerrenda' => $kostuZerrenda]
         );
         $this->sendResponsePDF($html, $udala, $fitxa);
     }
@@ @@
      * @Route("/{udala}/{_locale}/pdfelebi/{id}", name="frontend_fitxa_pdfelebi")
      * @Method("GET")
      */
-    public function pdfelebiAction ( Fitxa $fitxa, $udala )
+    public function pdfelebi ( Fitxa $fitxa, $udala )
     {

         $kanalmotak = $this->kanalmotaRepo->findAll();
@@ @@
         $eremuak = $this->eremuakRepo->findOneByUdalKodea($udala);
         $labelak = $this->eremuakRepo->findLabelakByUdalKodea($udala);

-        $kostuZerrenda = array();
+        $kostuZerrenda = [];
         foreach ( $fitxa->getKostuak() as $kostu ) {
             $client = new GuzzleHttp\Client();

@@ @@
         }
         $html = $this->render(
             'frontend/pdfelebi.html.twig',
-            array(
-                'fitxa'         => $fitxa,
-                'kanalmotak'    => $kanalmotak,
-                'eremuak'       => $eremuak,
-                'labelak'       => $labelak,
-                'udala'         => $udala,
-                'kostuZerrenda' => $kostuZerrenda,
-            )
+            ['fitxa'         => $fitxa, 'kanalmotak'    => $kanalmotak, 'eremuak'       => $eremuak, 'labelak'       => $labelak, 'udala'         => $udala, 'kostuZerrenda' => $kostuZerrenda]
         );
         $this->sendResponsePDF($html, $udala, $fitxa);
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * TernaryToNullCoalescingRector
 * ActionSuffixRemoverRector
 * ParamTypeFromRouteRequiredRegexRector
 * ResponseReturnTypeControllerActionRector


31) src/Controller/IsiltasunAdministratiboaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="isiltasunadministratiboa_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA'))
@@ @@
             $adapter = new ArrayAdapter($isiltasunAdministratiboas);
             $pagerfanta = new Pagerfanta($adapter);
             
-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($isiltasunAdministratiboas as $isiltasunAdministratiboa) {
                 $deleteForms[$isiltasunAdministratiboa->getId()] = $this->createDeleteForm($isiltasunAdministratiboa)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }
             
-            return $this->render('isiltasunadministratiboa/index.html.twig', array(
-                'isiltasunAdministratiboas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('isiltasunadministratiboa/index.html.twig', ['isiltasunAdministratiboas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="isiltasunadministratiboa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN')) {
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('isiltasunadministratiboa/new.html.twig', array(
-                'isiltasunAdministratiboa' => $isiltasunAdministratiboa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('isiltasunadministratiboa/new.html.twig', ['isiltasunAdministratiboa' => $isiltasunAdministratiboa, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="isiltasunadministratiboa_show")
      * @Method("GET")
      */
-    public function showAction(IsiltasunAdministratiboa $isiltasunAdministratiboa)
+    public function show(IsiltasunAdministratiboa $isiltasunAdministratiboa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($isiltasunAdministratiboa);

-        return $this->render('isiltasunadministratiboa/show.html.twig', array(
-            'isiltasunAdministratiboa' => $isiltasunAdministratiboa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('isiltasunadministratiboa/show.html.twig', ['isiltasunAdministratiboa' => $isiltasunAdministratiboa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="isiltasunadministratiboa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, IsiltasunAdministratiboa $isiltasunAdministratiboa)
+    public function edit(Request $request, IsiltasunAdministratiboa $isiltasunAdministratiboa)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($isiltasunAdministratiboa->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($isiltasunAdministratiboa);
                 $this->em->flush();
     
-                return $this->redirectToRoute('isiltasunadministratiboa_edit', array('id' => $isiltasunAdministratiboa->getId()));
+                return $this->redirectToRoute('isiltasunadministratiboa_edit', ['id' => $isiltasunAdministratiboa->getId()]);
             }
     
-            return $this->render('isiltasunadministratiboa/edit.html.twig', array(
-                'isiltasunAdministratiboa' => $isiltasunAdministratiboa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('isiltasunadministratiboa/edit.html.twig', ['isiltasunAdministratiboa' => $isiltasunAdministratiboa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="isiltasunadministratiboa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, IsiltasunAdministratiboa $isiltasunAdministratiboa)
+    public function delete(Request $request, IsiltasunAdministratiboa $isiltasunAdministratiboa): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($isiltasunAdministratiboa->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(IsiltasunAdministratiboa $isiltasunAdministratiboa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('isiltasunadministratiboa_delete', array('id' => $isiltasunAdministratiboa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('isiltasunadministratiboa_delete', ['id' => $isiltasunAdministratiboa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


32) src/Controller/KaleaController.php:35

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="kalea_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index()
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $kaleas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($kaleas as $kalea) {
                 $deleteForms[$kalea->getId()] = $this->createDeleteForm($kalea)->createView();
             }


-            return $this->render('kalea/index.html.twig', array(
-                'kaleas' => $kaleas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('kalea/index.html.twig', ['kaleas' => $kaleas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="kalea_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN')) 
@@ @@
                 $form->setData($form->getData());
             }
     
-            return $this->render('kalea/new.html.twig', array(
-                'kalea' => $kalea,
-                'form' => $form->createView(),
-            ));
+            return $this->render('kalea/new.html.twig', ['kalea' => $kalea, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kalea_show")
      * @Method("GET")
      */
-    public function showAction(Kalea $kalea)
+    public function show(Kalea $kalea): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($kalea);

-        return $this->render('kalea/show.html.twig', array(
-            'kalea' => $kalea,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('kalea/show.html.twig', ['kalea' => $kalea, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="kalea_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Kalea $kalea)
+    public function edit(Request $request, Kalea $kalea)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kalea->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($kalea);
                 $this->em->flush();
     
-                return $this->redirectToRoute('kalea_edit', array('id' => $kalea->getId()));
+                return $this->redirectToRoute('kalea_edit', ['id' => $kalea->getId()]);
             }
     
-            return $this->render('kalea/edit.html.twig', array(
-                'kalea' => $kalea,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('kalea/edit.html.twig', ['kalea' => $kalea, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kalea_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Kalea $kalea)
+    public function delete(Request $request, Kalea $kalea): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kalea->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Kalea $kalea)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('kalea_delete', array('id' => $kalea->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('kalea_delete', ['id' => $kalea->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


33) src/Controller/KanalaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="kanala_index_paginated") 
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $kanalas = $this->repo->findBy( array(), array('kanalmota'=>'ASC') );
+            $kanalas = $this->repo->findBy( [], ['kanalmota'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($kanalas as $kanala) {
                 $deleteForms[$kanala->getId()] = $this->createDeleteForm($kanala)->createView();
             }

-            return $this->render('kanala/index.html.twig', array(
-                'kanalas' => $kanalas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('kanala/index.html.twig', ['kanalas' => $kanalas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="kanala_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('kanala/new.html.twig', array(
-                'kanala' => $kanala,
-                'form' => $form->createView(),
-            ));
+            return $this->render('kanala/new.html.twig', ['kanala' => $kanala, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kanala_show")
      * @Method("GET")
      */
-    public function showAction(Kanala $kanala)
+    public function show(Kanala $kanala): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($kanala);

-        return $this->render('kanala/show.html.twig', array(
-            'kanala' => $kanala,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('kanala/show.html.twig', ['kanala' => $kanala, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="kanala_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Kanala $kanala)
+    public function edit(Request $request, Kanala $kanala)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kanala->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($kanala);
                 $this->em->flush();

-                return $this->redirectToRoute('kanala_edit', array('id' => $kanala->getId()));
+                return $this->redirectToRoute('kanala_edit', ['id' => $kanala->getId()]);
             }

-            return $this->render('kanala/edit.html.twig', array(
-                'kanala' => $kanala,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('kanala/edit.html.twig', ['kanala' => $kanala, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kanala_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Kanala $kanala)
+    public function delete(Request $request, Kanala $kanala): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kanala->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Kanala $kanala)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('kanala_delete', array('id' => $kanala->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('kanala_delete', ['id' => $kanala->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


34) src/Controller/KanalmotaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="kanalmota_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
@@ @@
             $adapter = new ArrayAdapter($kanalmotas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($kanalmotas as $kanalmota) {
                 $deleteForms[$kanalmota->getId()] = $this->createDeleteForm($kanalmota)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('kanalmota/index.html.twig', array(
-                'kanalmotas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('kanalmota/index.html.twig', ['kanalmotas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="kanalmota_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('kanalmota/new.html.twig', array(
-                'kanalmotum' => $kanalmotum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('kanalmota/new.html.twig', ['kanalmotum' => $kanalmotum, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kanalmota_show")
      * @Method("GET")
      */
-    public function showAction(Kanalmota $kanalmotum)
+    public function show(Kanalmota $kanalmotum): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($kanalmotum);

-        return $this->render('kanalmota/show.html.twig', array(
-            'kanalmotum' => $kanalmotum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('kanalmota/show.html.twig', ['kanalmotum' => $kanalmotum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="kanalmota_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Kanalmota $kanalmotum)
+    public function edit(Request $request, Kanalmota $kanalmotum)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kanalmotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($kanalmotum);
                 $this->em->flush();

-                return $this->redirectToRoute('kanalmota_edit', array('id' => $kanalmotum->getId()));
+                return $this->redirectToRoute('kanalmota_edit', ['id' => $kanalmotum->getId()]);
             }

-            return $this->render('kanalmota/edit.html.twig', array(
-                'kanalmotum' => $kanalmotum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('kanalmota/edit.html.twig', ['kanalmotum' => $kanalmotum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kanalmota_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Kanalmota $kanalmotum)
+    public function delete(Request $request, Kanalmota $kanalmotum): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kanalmotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Kanalmota $kanalmotum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('kanalmota_delete', array('id' => $kanalmotum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('kanalmota_delete', ['id' => $kanalmotum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


35) src/Controller/KontzeptuaController.php:32

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="kontzeptua_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index()
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $kontzeptuas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($kontzeptuas as $kontzeptua) {
                 $deleteForms[$kontzeptua->getId()] = $this->createDeleteForm($kontzeptua)->createView();
             }

-            return $this->render('kontzeptua/index.html.twig', array(
-                'kontzeptuas' => $kontzeptuas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('kontzeptua/index.html.twig', ['kontzeptuas' => $kontzeptuas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="kontzeptua_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('kontzeptua/new.html.twig', array(
-                'kontzeptua' => $kontzeptua,
-                'form' => $form->createView(),
-            ));
+            return $this->render('kontzeptua/new.html.twig', ['kontzeptua' => $kontzeptua, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kontzeptua_show")
      * @Method("GET")
      */
-    public function showAction(Kontzeptua $kontzeptua)
+    public function show(Kontzeptua $kontzeptua): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($kontzeptua);

-        return $this->render('kontzeptua/show.html.twig', array(
-            'kontzeptua' => $kontzeptua,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('kontzeptua/show.html.twig', ['kontzeptua' => $kontzeptua, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="kontzeptua_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Kontzeptua $kontzeptua)
+    public function edit(Request $request, Kontzeptua $kontzeptua)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kontzeptua->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($kontzeptua);
                 $this->em->flush();

-                return $this->redirectToRoute('kontzeptua_edit', array('id' => $kontzeptua->getId()));
+                return $this->redirectToRoute('kontzeptua_edit', ['id' => $kontzeptua->getId()]);
             }

-            return $this->render('kontzeptua/edit.html.twig', array(
-                'kontzeptua' => $kontzeptua,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('kontzeptua/edit.html.twig', ['kontzeptua' => $kontzeptua, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kontzeptua_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Kontzeptua $kontzeptua)
+    public function delete(Request $request, Kontzeptua $kontzeptua): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kontzeptua->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Kontzeptua $kontzeptua)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('kontzeptua_delete', array('id' => $kontzeptua->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('kontzeptua_delete', ['id' => $kontzeptua->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


36) src/Controller/KontzeptumotaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="kontzeptumota_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA'))
@@ @@
             $adapter = new ArrayAdapter($kontzeptumotas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($kontzeptumotas as $kontzeptua) {
                 $deleteForms[$kontzeptua->getId()] = $this->createDeleteForm($kontzeptua)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }

-            return $this->render('kontzeptumota/index.html.twig', array(
-//                'kontzeptumotas' => $kontzeptumotas,
+            return $this->render('kontzeptumota/index.html.twig', [
+                //                'kontzeptumotas' => $kontzeptumotas,
                 'kontzeptumotas' => $entities,
                 'deleteforms' => $deleteForms,
                 'pager' => $pagerfanta,
-            ));
+            ]);

         }else
         {
@@ @@
      * @Route("/new", name="kontzeptumota_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('kontzeptumota/new.html.twig', array(
-                'kontzeptumotum' => $kontzeptumotum,
-                'form' => $form->createView(),
-            ));
+            return $this->render('kontzeptumota/new.html.twig', ['kontzeptumotum' => $kontzeptumotum, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kontzeptumota_show")
      * @Method("GET")
      */
-    public function showAction(Kontzeptumota $kontzeptumotum)
+    public function show(Kontzeptumota $kontzeptumotum): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($kontzeptumotum);

-        return $this->render('kontzeptumota/show.html.twig', array(
-            'kontzeptumotum' => $kontzeptumotum,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('kontzeptumota/show.html.twig', ['kontzeptumotum' => $kontzeptumotum, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="kontzeptumota_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Kontzeptumota $kontzeptumotum)
+    public function edit(Request $request, Kontzeptumota $kontzeptumotum)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kontzeptumotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($kontzeptumotum);
                 $this->em->flush();

-                return $this->redirectToRoute('kontzeptumota_edit', array('id' => $kontzeptumotum->getId()));
+                return $this->redirectToRoute('kontzeptumota_edit', ['id' => $kontzeptumotum->getId()]);
             }

-            return $this->render('kontzeptumota/edit.html.twig', array(
-                'kontzeptumotum' => $kontzeptumotum,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('kontzeptumota/edit.html.twig', ['kontzeptumotum' => $kontzeptumotum, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="kontzeptumota_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Kontzeptumota $kontzeptumotum)
+    public function delete(Request $request, Kontzeptumota $kontzeptumotum): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($kontzeptumotum->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Kontzeptumota $kontzeptumotum)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('kontzeptumota_delete', array('id' => $kontzeptumotum->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('kontzeptumota_delete', ['id' => $kontzeptumotum->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


37) src/Controller/NorkebatziController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="norkebatzi_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $norkebatzis = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($norkebatzis as $norkebatzi) {
                 $deleteForms[$norkebatzi->getId()] = $this->createDeleteForm($norkebatzi)->createView();
             }

-            return $this->render('norkebatzi/index.html.twig', array(
-                'norkebatzis' => $norkebatzis,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('norkebatzi/index.html.twig', ['norkebatzis' => $norkebatzis, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="norkebatzi_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('norkebatzi/new.html.twig', array(
-                'norkebatzi' => $norkebatzi,
-                'form' => $form->createView(),
-            ));
+            return $this->render('norkebatzi/new.html.twig', ['norkebatzi' => $norkebatzi, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="norkebatzi_show")
      * @Method("GET")
      */
-    public function showAction(Norkebatzi $norkebatzi)
+    public function show(Norkebatzi $norkebatzi): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($norkebatzi);

-        return $this->render('norkebatzi/show.html.twig', array(
-            'norkebatzi' => $norkebatzi,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('norkebatzi/show.html.twig', ['norkebatzi' => $norkebatzi, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="norkebatzi_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Norkebatzi $norkebatzi)
+    public function edit(Request $request, Norkebatzi $norkebatzi)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($norkebatzi->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($norkebatzi);
                 $this->em->flush();

-                return $this->redirectToRoute('norkebatzi_edit', array('id' => $norkebatzi->getId()));
+                return $this->redirectToRoute('norkebatzi_edit', ['id' => $norkebatzi->getId()]);
             }

-            return $this->render('norkebatzi/edit.html.twig', array(
-                'norkebatzi' => $norkebatzi,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('norkebatzi/edit.html.twig', ['norkebatzi' => $norkebatzi, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="norkebatzi_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Norkebatzi $norkebatzi)
+    public function delete(Request $request, Norkebatzi $norkebatzi): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($norkebatzi->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Norkebatzi $norkebatzi)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('norkebatzi_delete', array('id' => $norkebatzi->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('norkebatzi_delete', ['id' => $norkebatzi->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


38) src/Controller/NorkeskatuController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="norkeskatu_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $norkeskatus = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($norkeskatus as $norkeskatu) {
                 $deleteForms[$norkeskatu->getId()] = $this->createDeleteForm($norkeskatu)->createView();
             }

-            return $this->render('norkeskatu/index.html.twig', array(
-                'norkeskatus' => $norkeskatus,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('norkeskatu/index.html.twig', ['norkeskatus' => $norkeskatus, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="norkeskatu_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('norkeskatu/new.html.twig', array(
-                'norkeskatu' => $norkeskatu,
-                'form' => $form->createView(),
-            ));
+            return $this->render('norkeskatu/new.html.twig', ['norkeskatu' => $norkeskatu, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="norkeskatu_show")
      * @Method("GET")
      */
-    public function showAction(Norkeskatu $norkeskatu)
+    public function show(Norkeskatu $norkeskatu): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($norkeskatu);

-        return $this->render('norkeskatu/show.html.twig', array(
-            'norkeskatu' => $norkeskatu,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('norkeskatu/show.html.twig', ['norkeskatu' => $norkeskatu, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="norkeskatu_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Norkeskatu $norkeskatu)
+    public function edit(Request $request, Norkeskatu $norkeskatu)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($norkeskatu->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($norkeskatu);
                 $this->em->flush();
     
-                return $this->redirectToRoute('norkeskatu_edit', array('id' => $norkeskatu->getId()));
+                return $this->redirectToRoute('norkeskatu_edit', ['id' => $norkeskatu->getId()]);
             }
     
-            return $this->render('norkeskatu/edit.html.twig', array(
-                'norkeskatu' => $norkeskatu,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('norkeskatu/edit.html.twig', ['norkeskatu' => $norkeskatu, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="norkeskatu_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Norkeskatu $norkeskatu)
+    public function delete(Request $request, Norkeskatu $norkeskatu): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($norkeskatu->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Norkeskatu $norkeskatu)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('norkeskatu_delete', array('id' => $norkeskatu->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('norkeskatu_delete', ['id' => $norkeskatu->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


39) src/Controller/OrdenantzaController.php:32

    ---------- begin diff ----------
@@ @@
          * @Route("/", name="ordenantza_index")
          * @Method("GET")
          */
-        public function indexAction ()
+        public function index ()
         {

             if ( $this->isGranted( 'ROLE_ADMIN' ) ) {
                 $ordenantzas = $this->repo->findAll();

-                $deleteForms = array ();
+                $deleteForms = [];
                 foreach ( $ordenantzas as $ordenantza ) {
                     $deleteForms[ $ordenantza->getId() ] = $this->createDeleteForm( $ordenantza )->createView();
                 }
@@ @@

                 return $this->render(
                     'ordenantza/index.html.twig',
-                    array (
-                        'ordenantzas' => $ordenantzas,
-                        'deleteforms' => $deleteForms,
-                    )
+                    ['ordenantzas' => $ordenantzas, 'deleteforms' => $deleteForms]
                 );
             } else {
                 return $this->redirectToRoute( 'backend_errorea' );
@@ @@
          * @Route("/new", name="ordenantza_new")
          * @Method({"GET", "POST"})
          */
-        public function newAction ( Request $request )
+        public function new ( Request $request )
         {

             if ( $this->isGranted( 'ROLE_ADMIN' ) ) {
@@ @@

                 return $this->render(
                     'ordenantza/new.html.twig',
-                    array (
-                        'ordenantza' => $ordenantza,
-                        'form'       => $form->createView(),
-                    )
+                    ['ordenantza' => $ordenantza, 'form'       => $form->createView()]
                 );
             } else {
                 return $this->redirectToRoute( 'backend_errorea' );
@@ @@
          * @Route("/{id}", name="ordenantza_show")
          * @Method("GET")
          */
-        public function showAction ( Ordenantza $ordenantza )
+        public function show ( Ordenantza $ordenantza ): \Symfony\Component\HttpFoundation\Response
         {
             $deleteForm = $this->createDeleteForm( $ordenantza );

             return $this->render(
                 'ordenantza/show.html.twig',
-                array (
-                    'ordenantza'  => $ordenantza,
-                    'delete_form' => $deleteForm->createView(),
-                )
+                ['ordenantza'  => $ordenantza, 'delete_form' => $deleteForm->createView()]
             );
         }

@@ @@
          * @Route("/{id}/edit", name="ordenantza_edit")
          * @Method({"GET", "POST"})
          */
-        public function editAction ( Request $request, Ordenantza $ordenantza )
+        public function edit ( Request $request, Ordenantza $ordenantza )
         {

             if ( (($this->isGranted( 'ROLE_ADMIN' )) && ($ordenantza->getUdala() == $this->getUser()->getUdala(
@@ @@
                     $this->em->persist( $ordenantza );
                     $this->em->flush();

-                    return $this->redirectToRoute( 'ordenantza_edit', array ( 'id' => $ordenantza->getId() ) );
+                    return $this->redirectToRoute( 'ordenantza_edit', ['id' => $ordenantza->getId()] );
                 }

                 return $this->render(
                     'ordenantza/edit.html.twig',
-                    array (
-                        'ordenantza'  => $ordenantza,
-                        'edit_form'   => $editForm->createView(),
-                        'delete_form' => $deleteForm->createView(),
-                    )
+                    ['ordenantza'  => $ordenantza, 'edit_form'   => $editForm->createView(), 'delete_form' => $deleteForm->createView()]
                 );
             } else {
                 return $this->redirectToRoute( 'backend_errorea' );
@@ @@
          * @Route("/{id}", name="ordenantza_delete")
          * @Method("DELETE")
          */
-        public function deleteAction ( Request $request, Ordenantza $ordenantza )
+        public function delete ( Request $request, Ordenantza $ordenantza ): \Symfony\Component\HttpFoundation\RedirectResponse
         {

             if ( (($this->isGranted( 'ROLE_ADMIN' )) && ($ordenantza->getUdala() == $this->getUser()->getUdala(
@@ @@
         private function createDeleteForm ( Ordenantza $ordenantza )
         {
             return $this->createFormBuilder()
-                ->setAction( $this->generateUrl( 'ordenantza_delete', array ( 'id' => $ordenantza->getId() ) ) )
-                ->setMethod( 'DELETE' )
+                ->setAction( $this->generateUrl( 'ordenantza_delete', ['id' => $ordenantza->getId()] ) )
+                ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
                 ->getForm();
         }
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


40) src/Controller/OrdenantzaparrafoaController.php:32

    ---------- begin diff ----------
@@ @@
      * @Route("/", name="ordenantzaparrafoa_index")
      * @Method("GET")
      */
-    public function indexAction()
+    public function index()
     {

         if ($this->isGranted('ROLE_ADMIN')) {
             $ordenantzaparrafoas = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($ordenantzaparrafoas as $ordenantzaparrafoa) {
                 $deleteForms[$ordenantzaparrafoa->getId()] = $this->createDeleteForm($ordenantzaparrafoa)->createView();
             }

-            return $this->render('ordenantzaparrafoa/index.html.twig', array(
-                'ordenantzaparrafoas' => $ordenantzaparrafoas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('ordenantzaparrafoa/index.html.twig', ['ordenantzaparrafoas' => $ordenantzaparrafoas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="ordenantzaparrafoa_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('ordenantzaparrafoa/new.html.twig', array(
-                'ordenantzaparrafoa' => $ordenantzaparrafoa,
-                'form' => $form->createView(),
-            ));
+            return $this->render('ordenantzaparrafoa/new.html.twig', ['ordenantzaparrafoa' => $ordenantzaparrafoa, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="ordenantzaparrafoa_show")
      * @Method("GET")
      */
-    public function showAction(Ordenantzaparrafoa $ordenantzaparrafoa)
+    public function show(Ordenantzaparrafoa $ordenantzaparrafoa): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($ordenantzaparrafoa);

-        return $this->render('ordenantzaparrafoa/show.html.twig', array(
-            'ordenantzaparrafoa' => $ordenantzaparrafoa,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('ordenantzaparrafoa/show.html.twig', ['ordenantzaparrafoa' => $ordenantzaparrafoa, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="ordenantzaparrafoa_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Ordenantzaparrafoa $ordenantzaparrafoa)
+    public function edit(Request $request, Ordenantzaparrafoa $ordenantzaparrafoa)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($ordenantzaparrafoa->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($ordenantzaparrafoa);
                 $this->em->flush();

-                return $this->redirectToRoute('ordenantzaparrafoa_edit', array('id' => $ordenantzaparrafoa->getId()));
+                return $this->redirectToRoute('ordenantzaparrafoa_edit', ['id' => $ordenantzaparrafoa->getId()]);
             }

-            return $this->render('ordenantzaparrafoa/edit.html.twig', array(
-                'ordenantzaparrafoa' => $ordenantzaparrafoa,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('ordenantzaparrafoa/edit.html.twig', ['ordenantzaparrafoa' => $ordenantzaparrafoa, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="ordenantzaparrafoa_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Ordenantzaparrafoa $ordenantzaparrafoa)
+    public function delete(Request $request, Ordenantzaparrafoa $ordenantzaparrafoa): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($ordenantzaparrafoa->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Ordenantzaparrafoa $ordenantzaparrafoa)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('ordenantzaparrafoa_delete', array('id' => $ordenantzaparrafoa->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('ordenantzaparrafoa_delete', ['id' => $ordenantzaparrafoa->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


41) src/Controller/ProzeduraController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="prozedura_index_paginated")
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
             $prozeduras = $this->repo->findAll();

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($prozeduras as $prozedura) {
                 $deleteForms[$prozedura->getId()] = $this->createDeleteForm($prozedura)->createView();
             }

-            return $this->render('prozedura/index.html.twig', array(
-                'prozeduras' => $prozeduras,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('prozedura/index.html.twig', ['prozeduras' => $prozeduras, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="prozedura_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('prozedura/new.html.twig', array(
-                'prozedura' => $prozedura,
-                'form' => $form->createView(),
-            ));
+            return $this->render('prozedura/new.html.twig', ['prozedura' => $prozedura, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="prozedura_show")
      * @Method("GET")
      */
-    public function showAction(Prozedura $prozedura)
+    public function show(Prozedura $prozedura): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($prozedura);

-        return $this->render('prozedura/show.html.twig', array(
-            'prozedura' => $prozedura,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('prozedura/show.html.twig', ['prozedura' => $prozedura, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="prozedura_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Prozedura $prozedura)
+    public function edit(Request $request, Prozedura $prozedura)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($prozedura->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($prozedura);
                 $this->em->flush();

-                return $this->redirectToRoute('prozedura_edit', array('id' => $prozedura->getId()));
+                return $this->redirectToRoute('prozedura_edit', ['id' => $prozedura->getId()]);
             }

-            return $this->render('prozedura/edit.html.twig', array(
-                'prozedura' => $prozedura,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('prozedura/edit.html.twig', ['prozedura' => $prozedura, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="prozedura_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Prozedura $prozedura)
+    public function delete(Request $request, Prozedura $prozedura): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($prozedura->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Prozedura $prozedura)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('prozedura_delete', array('id' => $prozedura->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('prozedura_delete', ['id' => $prozedura->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


42) src/Controller/SailaController.php:36

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="saila_index_paginated") 
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_KUDEAKETA')) {
-            $sailas = $this->repo->findBy( array(), array('kodea'=>'ASC') );
+            $sailas = $this->repo->findBy( [], ['kodea'=>'ASC'] );

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($sailas as $saila) {
                 $deleteForms[$saila->getId()] = $this->createDeleteForm($saila)->createView();
             }

-            return $this->render('saila/index.html.twig', array(
-                'sailas' => $sailas,
-                'deleteforms' => $deleteForms
-            ));
+            return $this->render('saila/index.html.twig', ['sailas' => $sailas, 'deleteforms' => $deleteForms]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="saila_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_ADMIN'))
@@ @@
                 $form->setData($form->getData());
             }

-            return $this->render('saila/new.html.twig', array(
-                'saila' => $saila,
-                'form' => $form->createView(),
-            ));
+            return $this->render('saila/new.html.twig', ['saila' => $saila, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="saila_show")
      * @Method("GET")
      */
-    public function showAction(Saila $saila)
+    public function show(Saila $saila): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($saila);

-        return $this->render('saila/show.html.twig', array(
-            'saila' => $saila,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('saila/show.html.twig', ['saila' => $saila, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="saila_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Saila $saila)
+    public function edit(Request $request, Saila $saila)
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($saila->getUdala()==$this->getUser()->getUdala()))
@@ @@
                 $this->em->persist($saila);
                 $this->em->flush();
     
-                return $this->redirectToRoute('saila_edit', array('id' => $saila->getId()));
+                return $this->redirectToRoute('saila_edit', ['id' => $saila->getId()]);
             }
     
-            return $this->render('saila/edit.html.twig', array(
-                'saila' => $saila,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('saila/edit.html.twig', ['saila' => $saila, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="saila_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Saila $saila)
+    public function delete(Request $request, Saila $saila): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if((($this->isGranted('ROLE_ADMIN')) && ($saila->getUdala()==$this->getUser()->getUdala()))
@@ @@
     private function createDeleteForm(Saila $saila)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('saila_delete', array('id' => $saila->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('saila_delete', ['id' => $saila->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


43) src/Controller/UdalaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="udala_index_paginated")
      * @Method("GET")
      */
-    public function indexAction ( $page )
+    public function index ( $page )
     {

         if ( $this->isGranted( 'ROLE_SUPER_ADMIN' ) ) {
@@ @@
             $adapter = new ArrayAdapter( $udalas );
             $pagerfanta = new Pagerfanta( $adapter );

-            $deleteForms = array ();
+            $deleteForms = [];
             foreach ( $udalas as $udala ) {
                 $deleteForms[$udala->getId()] = $this->createDeleteForm( $udala )->createView();
             }
@@ @@

             return $this->render(
                 'udala/index.html.twig',
-                array (
-                    'udalas'      => $entities,
-                    'deleteforms' => $deleteForms,
-                    'pager'       => $pagerfanta,
-                )
+                ['udalas'      => $entities, 'deleteforms' => $deleteForms, 'pager'       => $pagerfanta]
             );
         } else {
             if ( $this->isGranted( 'ROLE_ADMIN' ) ) {
@@ @@
                 if ($this->getUser()->getUdala()) {
                     return $this->redirectToRoute(
                         'udala_show',
-                        array ('id' => $this->getUser()->getUdala()->getId())
+                        ['id' => $this->getUser()->getUdala()->getId()]
                     );
                 } else {
                     return $this->redirectToRoute(
@@ @@
      * @Route("/udala/errorea", defaults={"page" = 1}, name="udala_ez")
      * @Method("GET")
      */
-    public function udalaezAction ( $page )
+    public function udalaez ( $page ): \Symfony\Component\HttpFoundation\Response
     {
         return $this->render(
             'udala/index.html.twig'
@@ @@
      * @Route("/new", name="udala_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction ( Request $request )
+    public function new ( Request $request )
     {

         if ( $this->isGranted( 'ROLE_SUPER_ADMIN' ) ) {
@@ @@
                 $this->em->persist( $udala );
                 $this->em->flush();

-                return $this->redirectToRoute( 'udala_show', array ('id' => $udala->getId()) );
+                return $this->redirectToRoute( 'udala_show', ['id' => $udala->getId()] );
             }

             return $this->render(
                 'udala/new.html.twig',
-                array (
-                    'udala' => $udala,
-                    'form'  => $form->createView(),
-                )
+                ['udala' => $udala, 'form'  => $form->createView()]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      * @Route("/{id}", name="udala_show")
      * @Method("GET")
      */
-    public function showAction ( Udala $udala )
+    public function show ( Udala $udala ): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm( $udala );

         return $this->render(
             'udala/show.html.twig',
-            array (
-                'udala'       => $udala,
-                'delete_form' => $deleteForm->createView(),
-            )
+            ['udala'       => $udala, 'delete_form' => $deleteForm->createView()]
         );
     }

@@ @@
      * @Route("/{id}/edit", name="udala_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction ( Request $request, Udala $udala )
+    public function edit ( Request $request, Udala $udala )
     {

         if ( (($this->isGranted( 'ROLE_ADMIN' )) && ($udala == $this->getUser()->getUdala()))
@@ @@
                 $this->em->persist( $udala );
                 $this->em->flush();

-                return $this->redirectToRoute( 'udala_edit', array ('id' => $udala->getId()) );
+                return $this->redirectToRoute( 'udala_edit', ['id' => $udala->getId()] );
             }

             return $this->render(
                 'udala/edit.html.twig',
-                array (
-                    'udala'       => $udala,
-                    'edit_form'   => $editForm->createView(),
-                    'delete_form' => $deleteForm->createView(),
-                )
+                ['udala'       => $udala, 'edit_form'   => $editForm->createView(), 'delete_form' => $deleteForm->createView()]
             );
         } else {
             return $this->redirectToRoute( 'backend_errorea' );
@@ @@
      * @Route("/{id}", name="udala_delete")
      * @Method("DELETE")
      */
-    public function deleteAction ( Request $request, Udala $udala )
+    public function delete ( Request $request, Udala $udala ): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if ( $this->isGranted( 'ROLE_SUPER_ADMIN' ) ) {
@@ @@
     private function createDeleteForm ( Udala $udala )
     {
         return $this->createFormBuilder()
-            ->setAction( $this->generateUrl( 'udala_delete', array ('id' => $udala->getId()) ) )
-            ->setMethod( 'DELETE' )
+            ->setAction( $this->generateUrl( 'udala_delete', ['id' => $udala->getId()] ) )
+            ->setMethod( \Symfony\Component\HttpFoundation\Request::METHOD_DELETE )
             ->getForm();
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


44) src/Controller/ZerbitzuaController.php:37

    ---------- begin diff ----------
@@ @@
      * @Route("/page{page}", name="zerbitzua_index_paginated") 
      * @Method("GET")
      */
-    public function indexAction($page)
+    public function index($page)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN')) 
@@ @@
             $adapter = new ArrayAdapter($zerbitzuas);
             $pagerfanta = new Pagerfanta($adapter);

-            $deleteForms = array();
+            $deleteForms = [];
             foreach ($zerbitzuas as $zerbitzua) {
                 $deleteForms[$zerbitzua->getId()] = $this->createDeleteForm($zerbitzua)->createView();
             }
@@ @@
                 throw $this->createNotFoundException("Orria ez da existitzen");
             }
             
-            return $this->render('zerbitzua/index.html.twig', array(
-                'zerbitzuas' => $entities,
-                'deleteforms' => $deleteForms,
-                'pager' => $pagerfanta,
-            ));
+            return $this->render('zerbitzua/index.html.twig', ['zerbitzuas' => $entities, 'deleteforms' => $deleteForms, 'pager' => $pagerfanta]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/new", name="zerbitzua_new")
      * @Method({"GET", "POST"})
      */
-    public function newAction(Request $request)
+    public function new(Request $request)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
 //                return $this->redirectToRoute('zerbitzua_show', array('id' => $zerbitzua->getId()));
                 return $this->redirectToRoute('zerbitzua_index');
             }
-            return $this->render('zerbitzua/new.html.twig', array(
-                'zerbitzua' => $zerbitzua,
-                'form' => $form->createView(),
-            ));
+            return $this->render('zerbitzua/new.html.twig', ['zerbitzua' => $zerbitzua, 'form' => $form->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="zerbitzua_show")
      * @Method("GET")
      */
-    public function showAction(Zerbitzua $zerbitzua)
+    public function show(Zerbitzua $zerbitzua): \Symfony\Component\HttpFoundation\Response
     {
         $deleteForm = $this->createDeleteForm($zerbitzua);

-        return $this->render('zerbitzua/show.html.twig', array(
-            'zerbitzua' => $zerbitzua,
-            'delete_form' => $deleteForm->createView(),
-        ));
+        return $this->render('zerbitzua/show.html.twig', ['zerbitzua' => $zerbitzua, 'delete_form' => $deleteForm->createView()]);
     }

     /**
@@ @@
      * @Route("/{id}/edit", name="zerbitzua_edit")
      * @Method({"GET", "POST"})
      */
-    public function editAction(Request $request, Zerbitzua $zerbitzua)
+    public function edit(Request $request, Zerbitzua $zerbitzua)
     {

         if ($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
                 $this->em->persist($zerbitzua);
                 $this->em->flush();
     
-                return $this->redirectToRoute('zerbitzua_edit', array('id' => $zerbitzua->getId()));
+                return $this->redirectToRoute('zerbitzua_edit', ['id' => $zerbitzua->getId()]);
             }
     
-            return $this->render('zerbitzua/edit.html.twig', array(
-                'zerbitzua' => $zerbitzua,
-                'edit_form' => $editForm->createView(),
-                'delete_form' => $deleteForm->createView(),
-            ));
+            return $this->render('zerbitzua/edit.html.twig', ['zerbitzua' => $zerbitzua, 'edit_form' => $editForm->createView(), 'delete_form' => $deleteForm->createView()]);
         }else
         {
             return $this->redirectToRoute('backend_errorea');
@@ @@
      * @Route("/{id}", name="zerbitzua_delete")
      * @Method("DELETE")
      */
-    public function deleteAction(Request $request, Zerbitzua $zerbitzua)
+    public function delete(Request $request, Zerbitzua $zerbitzua): \Symfony\Component\HttpFoundation\RedirectResponse
     {

         if($this->isGranted('ROLE_SUPER_ADMIN'))
@@ @@
     private function createDeleteForm(Zerbitzua $zerbitzua)
     {
         return $this->createFormBuilder()
-            ->setAction($this->generateUrl('zerbitzua_delete', array('id' => $zerbitzua->getId())))
-            ->setMethod('DELETE')
+            ->setAction($this->generateUrl('zerbitzua_delete', ['id' => $zerbitzua->getId()]))
+            ->setMethod(\Symfony\Component\HttpFoundation\Request::METHOD_DELETE)
             ->getForm()
         ;
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * ActionSuffixRemoverRector
 * ResponseReturnTypeControllerActionRector
 * LiteralGetToRequestClassConstantRector


45) src/Entity/Eremuak.php:30

    ---------- begin diff ----------
@@ @@
      *
      * @ORM\Column(name="oharraktext", type="boolean", nullable=false,options={"default" = true})
      */
-    private $oharraktext;
+    private $oharraktext = true;

     /**
      * @var oharraklabeleu
@@ @@
      *
      * @ORM\Column(name="oharraklabeleu", type="string", length=255, nullable=true,options={"default" = "OHARRAK"})
      */
-    private $oharraklabeleu;
+    private $oharraklabeleu = "OHARRAK";

     /**
      * @var oharraklabeles
@@ @@
      *
      * @ORM\Column(name="oharraklabeles", type="string", length=255, nullable=true,options={"default" = "OBSERVACIONES"})
      */
-    private $oharraklabeles;
+    private $oharraklabeles = "OBSERVACIONES";


     /**
@@ @@
      *
      * @ORM\Column(name="helburuatext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $helburuatext;
+    private $helburuatext = true;

     /**
      * @var helburualabeleu
@@ @@
      *
      * @ORM\Column(name="helburualabeleu", type="string", length=255, nullable=true)
      */
-    private $helburualabeleu;
+    private $helburualabeleu = "ZER DA? ZERTARAKO DA?";

     /**
      * @var helburualabeles
@@ @@
      *
      * @ORM\Column(name="helburualabeles", type="string", length=255, nullable=true)
      */
-    private $helburualabeles;
+    private $helburualabeles = "¿QUÉ ES? ¿PARA QUÉ?";


     /**
@@ @@
      *
      * @ORM\Column(name="ebazpensinpli", type="boolean", nullable=true,options={"default" = false})
      */
-    private $ebazpensinpli;
+    private $ebazpensinpli = true;

     /**
      * @var ebazpensinplilabeleu
@@ @@
      *
      * @ORM\Column(name="ebazpensinplilabeleu", type="string", length=255, nullable=true)
      */
-    private $ebazpensinplilabeleu;
+    private $ebazpensinplilabeleu = "Prozedura sinplifikatua onartzen da? (30 egun)";

     /**
      * @var ebazpensinplilabeles
@@ @@
      *
      * @ORM\Column(name="ebazpensinplilabeles", type="string", length=255, nullable=true)
      */
-    private $ebazpensinplilabeles;
+    private $ebazpensinplilabeles = "Admite procedimiento simplificado? ";


     /**
@@ @@
      *
      * @ORM\Column(name="arduraaitorpena", type="boolean", nullable=true,options={"default" = false})
      */
-    private $arduraaitorpena;
+    private $arduraaitorpena = true;

     /**
      * @var arduraaitorpenalabeleu
@@ @@
      *
      * @ORM\Column(name="arduraaitorpenalabeleu", type="string", length=255, nullable=true)
      */
-    private $arduraaitorpenalabeleu;
+    private $arduraaitorpenalabeleu = "Erantzunkizun-aitorpena onartzen da? ";

     /**
      * @var arduraaitorpenalabeles
@@ @@
      *
      * @ORM\Column(name="arduraaitorpenalabeles", type="string", length=255, nullable=true)
      */
-    private $arduraaitorpenalabeles;
+    private $arduraaitorpenalabeles = "Admite declaración de responsabilidad?";



@@ @@
      *
      * @ORM\Column(name="aurreikusi", type="boolean", nullable=true,options={"default" = false})
      */
-    private $aurreikusi;
+    private $aurreikusi = true;

     /**
      * @var aurreikusilabeleu
@@ @@
      *
      * @ORM\Column(name="aurreikusilabeleu", type="string", length=255, nullable=true)
      */
-    private $aurreikusilabeleu;
+    private $aurreikusilabeleu = "Aurreikusitako epea";

     /**
      * @var aurreikusilabeles
@@ @@
      *
      * @ORM\Column(name="aurreikusilabeles", type="string", length=255, nullable=true)
      */
-    private $aurreikusilabeles;
+    private $aurreikusilabeles = "Plazo estimado";

     /**
      * @var arrunta
@@ @@
      *
      * @ORM\Column(name="arrunta", type="boolean", nullable=true,options={"default" = false})
      */
-    private $arrunta;
+    private $arrunta = true;

     /**
      * @var arruntalabeleu
@@ @@
      *
      * @ORM\Column(name="arruntalabeleu", type="string", length=255, nullable=true)
      */
-    private $arruntalabeleu;
+    private $arruntalabeleu = "Prozedura arrunta. Legezko gehienezko epea";

     /**
      * @var arruntalabeles
@@ @@
      *
      * @ORM\Column(name="arruntalabeles", type="string", length=255, nullable=true)
      */
-    private $arruntalabeles;
+    private $arruntalabeles = "Procedimiento habitual. Plazo limite legal";


     /**
@@ @@
      *
      * @ORM\Column(name="isiltasunadmin", type="boolean", nullable=true,options={"default" = false})
      */
-    private $isiltasunadmin;
+    private $isiltasunadmin = true;

     /**
      * @var isiltasunadminlabeleu
@@ @@
      *
      * @ORM\Column(name="isiltasunadminlabeleu", type="string", length=255, nullable=true)
      */
-    private $isiltasunadminlabeleu;
+    private $isiltasunadminlabeleu = "Isiltasun-administratiboaren izaera";

     /**
      * @var isiltasunadminlabeles
@@ @@
      *
      * @ORM\Column(name="isiltasunadminlabeles", type="string", length=255, nullable=true)
      */
-    private $isiltasunadminlabeles;
+    private $isiltasunadminlabeles = "Carácter del silencio administrativo";



@@ @@
      *
      * @ORM\Column(name="norkeskatutext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $norkeskatutext;
+    private $norkeskatutext = true;

     /**
      * @var norkeskatutable
@@ @@
      *
      * @ORM\Column(name="norkeskatutable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $norkeskatutable;
+    private $norkeskatutable = false;


     /**
@@ @@
      *
      * @ORM\Column(name="norkeskatulabeleu", type="string", length=255, nullable=true)
      */
-    private $norkeskatulabeleu;
+    private $norkeskatulabeleu = "NORK ESKA DEZAKE?";

     /**
      * @var norkeskatulabeles
@@ @@
      *
      * @ORM\Column(name="norkeskatulabeles", type="string", length=255, nullable=true)
      */
-    private $norkeskatulabeles;
+    private $norkeskatulabeles = "¿QUIÉN LO PUEDE SOLICITAR?";



@@ @@
      *
      * @ORM\Column(name="dokumentazioatext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $dokumentazioatext;
+    private $dokumentazioatext = true;

     /**
      * @var dokumentazioatable
@@ @@
      *
      * @ORM\Column(name="dokumentazioatable", type="boolean", nullable=true)
      */
-    private $dokumentazioatable;
+    private $dokumentazioatable = true;


     /**
@@ @@
      *
      * @ORM\Column(name="dokumentazioalabeleu", type="string", length=255, nullable=true)
      */
-    private $dokumentazioalabeleu;
+    private $dokumentazioalabeleu = "AURKEZTU BEHARREKO AGIRIAK";

     /**
      * @var dokumentazioalabeles
@@ @@
      *
      * @ORM\Column(name="dokumentazioalabeles", type="string", length=255, nullable=true)
      */
-    private $dokumentazioalabeles;
+    private $dokumentazioalabeles = "DOCUMENTACIÓN A APORTAR";



@@ @@
      *
      * @ORM\Column(name="kostuatext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $kostuatext;
+    private $kostuatext = true;

     /**
      * @var kostuatable
@@ @@
      *
      * @ORM\Column(name="kostuatable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $kostuatable;
+    private $kostuatable = true;


     /**
@@ @@
      *
      * @ORM\Column(name="kostualabeleu", type="string", length=255, nullable=true)
      */
-    private $kostualabeleu;
+    private $kostualabeleu = "ZENBAT KOSTATZEN DA?";

     /**
      * @var kostualabeles
@@ @@
      *
      * @ORM\Column(name="kostualabeles", type="string", length=255, nullable=true)
      */
-    private $kostualabeles;
+    private $kostualabeles = "¿CUÁNTO CUESTA?";



@@ @@
      *
      * @ORM\Column(name="araudiatext", type="boolean", nullable=true,options={"default" = true})
      */
-    private $araudiatext;
+    private $araudiatext = false;

     /**
      * @var araudiatable
@@ @@
      *
      * @ORM\Column(name="araudiatable", type="boolean", nullable=true,options={"default" = true})
      */
-    private $araudiatable;
+    private $araudiatable = true;


     /**
@@ @@
      *
      * @ORM\Column(name="araudialabeleu", type="string", length=255, nullable=true)
      */
-    private $araudialabeleu;
+    private $araudialabeleu = "ARAUDI APLIKAGARRIA";

     /**
      * @var araudialabeles
@@ @@
      *
      * @ORM\Column(name="araudialabeles", type="string", length=255, nullable=true)
      */
-    private $araudialabeles;
+    private $araudialabeles = "NORMATIVA APLICABLE";


     /**
@@ @@
      *
      * @ORM\Column(name="prozeduratext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $prozeduratext;
+    private $prozeduratext = true;

     /**
      * @var prozeduratable
@@ @@
      *
      * @ORM\Column(name="prozeduratable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $prozeduratable;
+    private $prozeduratable = false;


     /**
@@ @@
      *
      * @ORM\Column(name="prozeduralabeleu", type="string", length=255, nullable=true)
      */
-    private $prozeduralabeleu;
+    private $prozeduralabeleu = "ESKAERA JASO ONDOREN JARRAITU BEHARREKO PROZEDURA";

     /**
      * @var prozeduralabeles
@@ @@
      *
      * @ORM\Column(name="prozeduralabeles", type="string", length=255, nullable=true)
      */
-    private $prozeduralabeles;
+    private $prozeduralabeles = "PROCEDIMIENTO A SEGUIR DESPUÉS DE LA SOLICITUD";



@@ @@
      *
      * @ORM\Column(name="doklaguntext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $doklaguntext;
+    private $doklaguntext = false;

     /**
      * @var doklaguntable
@@ @@
      *
      * @ORM\Column(name="doklaguntable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $doklaguntable;
+    private $doklaguntable = false;


     /**
@@ @@
      *
      * @ORM\Column(name="doklagunlabeleu", type="string", length=255, nullable=true)
      */
-    private $doklagunlabeleu;
+    private $doklagunlabeleu = "DOKUMENTAZIO LAGUNGARRIA";

     /**
      * @var doklagunlabeles
@@ @@
      *
      * @ORM\Column(name="doklagunlabeles", type="string", length=255, nullable=true)
      */
-    private $doklagunlabeles;
+    private $doklagunlabeles = "DOCUMENTACIÓN AUXILIAR";


     /**
@@ @@
      *
      * @ORM\Column(name="datuenbabesatext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $datuenbabesatext;
+    private $datuenbabesatext = false;

     /**
      * @var datuenbabesatable
@@ @@
      *
      * @ORM\Column(name="datuenbabesatable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $datuenbabesatable;
+    private $datuenbabesatable = true;


     /**
@@ @@
      *
      * @ORM\Column(name="datuenbabesalabeleu", type="string", length=255, nullable=true)
      */
-    private $datuenbabesalabeleu;
+    private $datuenbabesalabeleu = "DATU PERTSONALEN BABESA";

     /**
      * @var datuenbabesalabeles
@@ @@
      *
      * @ORM\Column(name="datuenbabesalabeles", type="string", length=255, nullable=true)
      */
-    private $datuenbabesalabeles;
+    private $datuenbabesalabeles = "PROTECCIÓN DE DATOS DE CARÁCTER PERSONAL";

     /**
      * @var azpisailatable
@@ @@
      *
      * @ORM\Column(name="azpisailatable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $azpisailatable;
+    private $azpisailatable = true;

     /**
      * @var azpisailalabeleu
@@ @@
      *
      * @ORM\Column(name="azpisailalabeleu", type="string", length=255, nullable=true)
      */
-    private $azpisailalabeleu;
+    private $azpisailalabeleu = "IZAPIDETZEKO ARDURA DUEN UDAL SAILA";

     /**
      * @var azpisailalabeles
@@ @@
      *
      * @ORM\Column(name="azpisailalabeles", type="string", length=255, nullable=true)
      */
-    private $azpisailalabeles;
+    private $azpisailalabeles = "DEPARTAMENTO MUNICIPAL RESPONSABLE DE LA TRAMITACIÓN";

     /**
      * @var norkebatzitext
@@ @@
      *
      * @ORM\Column(name="norkebatzitext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $norkebatzitext;
+    private $norkebatzitext = false;

     /**
      * @var norkebatzitable
@@ @@
      *
      * @ORM\Column(name="norkebatzitable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $norkebatzitable;
+    private $norkebatzitable = true;


     /**
@@ @@
      *
      * @ORM\Column(name="norkebatzilabeleu", type="string", length=255, nullable=true)
      */
-    private $norkebatzilabeleu;
+    private $norkebatzilabeleu = "NORK ONARTU BEHAR DU?";

     /**
      * @var norkebatzilabeles
@@ @@
      *
      * @ORM\Column(name="norkebatzilabeles", type="string", length=255, nullable=true)
      */
-    private $norkebatzilabeles;
+    private $norkebatzilabeles = "¿QUIÉN LO APRUEBA?";



@@ @@
      *
      * @ORM\Column(name="besteak1text", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak1text;
+    private $besteak1text = false;

     /**
      * @var besteak1table
@@ @@
      *
      * @ORM\Column(name="besteak1table", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak1table;
+    private $besteak1table = false;


     /**
@@ @@
      *
      * @ORM\Column(name="besteak1labeleu", type="string", length=255, nullable=true)
      */
-    private $besteak1labeleu;
+    private $besteak1labeleu = "";

     /**
      * @var besteak1labeles
@@ @@
      *
      * @ORM\Column(name="besteak1labeles", type="string", length=255, nullable=true)
      */
-    private $besteak1labeles;
+    private $besteak1labeles = "";

     /**
      * @var besteak2text
@@ @@
      *
      * @ORM\Column(name="besteak2text", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak2text;
+    private $besteak2text = false;

     /**
      * @var besteak2table
@@ @@
      *
      * @ORM\Column(name="besteak2table", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak2table;
+    private $besteak2table = false;


     /**
@@ @@
      *
      * @ORM\Column(name="besteak2labeleu", type="string", length=255, nullable=true)
      */
-    private $besteak2labeleu;
+    private $besteak2labeleu = "";

     /**
      * @var besteak2labeles
@@ @@
      *
      * @ORM\Column(name="besteak2labeles", type="string", length=255, nullable=true)
      */
-    private $besteak2labeles;
+    private $besteak2labeles = "";


     /**
@@ @@
      *
      * @ORM\Column(name="besteak3text", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak3text;
+    private $besteak3text = false;

     /**
      * @var besteak3table
@@ @@
      *
      * @ORM\Column(name="besteak3table", type="boolean", nullable=true,options={"default" = false})
      */
-    private $besteak3table;
+    private $besteak3table = false;

     /**
      * @var besteak3labeleu
@@ @@
      *
      * @ORM\Column(name="besteak3labeleu", type="string", length=255, nullable=true)
      */
-    private $besteak3labeleu;
+    private $besteak3labeleu = "";

     /**
      * @var besteak3labeles
@@ @@
      *
      * @ORM\Column(name="besteak3labeles", type="string", length=255, nullable=true)
      */
-    private $besteak3labeles;
+    private $besteak3labeles = "";

     /**
      * @var kanalatext
@@ @@
      *
      * @ORM\Column(name="kanalatext", type="boolean", nullable=true,options={"default" = false})
      */
-    private $kanalatext;
+    private $kanalatext = false;

     /**
      * @var kanalatable
@@ @@
      *
      * @ORM\Column(name="kanalatable", type="boolean", nullable=true,options={"default" = false})
      */
-    private $kanalatable;
+    private $kanalatable = true;

     /**
      * @var kanalalabeleu
@@ @@
      *
      * @ORM\Column(name="kanalalabeleu", type="string", length=255, nullable=true)
      */
-    private $kanalalabeleu;
+    private $kanalalabeleu = "NON ESKATZEN DA?";

     /**
      * @var kanalalabeles
@@ @@
      *
      * @ORM\Column(name="kanalalabeles", type="string", length=255, nullable=true)
      */
-    private $kanalalabeles;
+    private $kanalalabeles = "¿DÓNDE SE SOLICITA?";


     /**
@@ @@
      *
      * @ORM\Column(name="epealabeleu", type="string", length=255, nullable=true)
      */
-    private $epealabeleu;
+    private $epealabeleu = "PROZEDURAREN EPEA";

     /**
      * @var epealabeles
@@ @@
      *
      * @ORM\Column(name="epealabeles", type="string", length=255, nullable=true)
      */
-    private $epealabeles;
+    private $epealabeles = "PLAZO DEL PROCEDIMIENTO";

     /**
      * @var doanlabeleu
@@ @@
      *
      * @ORM\Column(name="doanlabeleu", type="string", length=255, nullable=true)
      */
-    private $doanlabeleu;
+    private $doanlabeleu = "Doan";

     /**
      * @var doanlabeles
@@ @@
      *
      * @ORM\Column(name="doanlabeles", type="string", length=255, nullable=true)
      */
-    private $doanlabeles;
+    private $doanlabeles = "Gratuito";


     /**
@@ @@
      */
     public function __construct()
     {
-        $this->helburualabeles = "¿QUÉ ES? ¿PARA QUÉ?";
-        $this->helburualabeleu = "ZER DA? ZERTARAKO DA?";
-        $this->helburuatext = true;
-
-        $this->norkeskatulabeles = "¿QUIÉN LO PUEDE SOLICITAR?";
-        $this->norkeskatulabeleu = "NORK ESKA DEZAKE?";
-        $this->norkeskatutable = false;
-        $this->norkeskatutext = true;
-
-
-        $this->araudialabeles = "NORMATIVA APLICABLE";
-        $this->araudialabeleu = "ARAUDI APLIKAGARRIA";
-        $this->araudiatable = true;
-        $this->araudiatext = false;
-
-        $this->arduraaitorpena = true;
-        $this->arduraaitorpenalabeles = "Admite declaración de responsabilidad?";
-        $this->arduraaitorpenalabeleu = "Erantzunkizun-aitorpena onartzen da? ";
-        $this->arrunta = true;
-        $this->arruntalabeles = "Procedimiento habitual. Plazo limite legal";
-        $this->arruntalabeleu = "Prozedura arrunta. Legezko gehienezko epea";
-        $this->aurreikusi = true;
-        $this->aurreikusilabeles = "Plazo estimado";
-        $this->aurreikusilabeleu = "Aurreikusitako epea";
-        $this->isiltasunadmin = true;
-        $this->isiltasunadminlabeles = "Carácter del silencio administrativo";
-        $this->isiltasunadminlabeleu = "Isiltasun-administratiboaren izaera";
-        $this->ebazpensinpli = true;
-        $this->ebazpensinplilabeles = "Admite procedimiento simplificado? ";
-        $this->ebazpensinplilabeleu = "Prozedura sinplifikatua onartzen da? (30 egun)";
-
-        $this->dokumentazioalabeles = "DOCUMENTACIÓN A APORTAR";
-        $this->dokumentazioalabeleu = "AURKEZTU BEHARREKO AGIRIAK";
-        $this->dokumentazioatable = true;
-        $this->dokumentazioatext = true;
-
-        $this->doklagunlabeles = "DOCUMENTACIÓN AUXILIAR";
-        $this->doklagunlabeleu = "DOKUMENTAZIO LAGUNGARRIA";
-        $this->doklaguntable = false;
-        $this->doklaguntext = false;
-
-        $this->oharraklabeles = "OBSERVACIONES";
-        $this->oharraklabeleu = "OHARRAK";
-        $this->oharraktext = true;
-
-        $this->kostualabeles = "¿CUÁNTO CUESTA?";
-        $this->kostualabeleu = "ZENBAT KOSTATZEN DA?";
-        $this->kostuatable = true;
-        $this->kostuatext = true;
-
-        $this->kanalalabeles = "¿DÓNDE SE SOLICITA?";
-        $this->kanalalabeleu = "NON ESKATZEN DA?";
-        $this->kanalatable = true;
-        $this->kanalatext = false;
-
-        $this->azpisailalabeles = "DEPARTAMENTO MUNICIPAL RESPONSABLE DE LA TRAMITACIÓN";
-        $this->azpisailalabeleu = "IZAPIDETZEKO ARDURA DUEN UDAL SAILA";
-        $this->azpisailatable = true;
-
-        $this->norkebatzilabeles = "¿QUIÉN LO APRUEBA?";
-        $this->norkebatzilabeleu = "NORK ONARTU BEHAR DU?";
-        $this->norkebatzitable = true;
-        $this->norkebatzitext = false;
-
-        $this->datuenbabesalabeles = "PROTECCIÓN DE DATOS DE CARÁCTER PERSONAL";
-        $this->datuenbabesalabeleu = "DATU PERTSONALEN BABESA";
-        $this->datuenbabesatable = true;
-        $this->datuenbabesatext = false;
-
-        $this->prozeduralabeles = "PROCEDIMIENTO A SEGUIR DESPUÉS DE LA SOLICITUD";
-        $this->prozeduralabeleu = "ESKAERA JASO ONDOREN JARRAITU BEHARREKO PROZEDURA";
-        $this->prozeduratable = false;
-        $this->prozeduratext = true;
-
         $this->tramitealabeles = "RESUMEN DE TRÁMITES POSTERIORES";
         $this->tramitealabeleu = "GEROAGOKO IZAPIDEEN LABURPENA";
         $this->tramiteatable = false;
         $this->tramiteatext = true;
-
-
-        $this->besteak1labeles = "";
-        $this->besteak1labeleu = "";
-        $this->besteak1table = false;
-        $this->besteak1text = false;
-
-
-        $this->besteak2labeles = "";
-        $this->besteak2labeleu = "";
-        $this->besteak2table = false;
-        $this->besteak2text = false;
-        $this->besteak3labeles = "";
-        $this->besteak3labeleu = "";
-        $this->besteak3table = false;
-        $this->besteak3text = false;
-
-//        $this->udalsailalabeles = "DEPARTAMENTO MUNICIPAL RESPONSABLE DE LA TRAMITACIÓN";
-//        $this->udalsailalabeleu = "IZAPIDETZEKO ARDURA DUEN UDAL SAILA";
-
-        $this->epealabeles = "PLAZO DEL PROCEDIMIENTO";
-        $this->epealabeleu = "PROZEDURAREN EPEA";
-
-        $this->doanlabeles = "Gratuito";
-        $this->doanlabeleu = "Doan";
     }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


46) src/Entity/Espedientekudeaketa.php:52

    ---------- begin diff ----------
@@ @@
      */
     private $urles;

-    
+
     /**
      *          TOSTRING
      */
    ----------- end diff -----------

47) src/Entity/Udala.php:104

    ---------- begin diff ----------
@@ @@
      * @var integer
      * @ORM\Column(name="orrikatzea", type="bigint", nullable=false)
      */
-    private $orrikatzea;
+    private $orrikatzea = 25;


     /**
@@ @@
      */
     public function __construct()
     {
-        $this->orrikatzea=25;
-
-
         $this->fitxak = new ArrayCollection();
     }
    ----------- end diff -----------

Applied rules:
 * InlineConstructorDefaultToPropertyRector


48) src/Form/AraudiaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Araudia'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Araudia::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


49) src/Form/AraumotaType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Araumota'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Araumota::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


50) src/Form/ArruntaType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Arrunta'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Arrunta::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


51) src/Form/AtalaType.php:30

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Atala'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Atala::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


52) src/Form/AtalaparrafoaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Atalaparrafoa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Atalaparrafoa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


53) src/Form/AurreikusiType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Aurreikusi'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Aurreikusi::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


54) src/Form/AzpiatalaType.php:24

    ---------- begin diff ----------
@@ @@
             ->add('udala')
 //            ->add('atala')
 //            ->add('fitxak')
-            ->add('kontzeptuak', CollectionType::class, array(
-                'entry_type' => KontzeptuaType::class,
-                'allow_add' => true,
-                'allow_delete' => true,
-                'prototype' => true,
-                'by_reference' => false,
-            ))
-            ->add('parrafoak', CollectionType::class, array(
-                'entry_type' => AzpiatalaparrafoaType::class,
-                'allow_add' => true,
-                'allow_delete' => true,
-                'prototype' => true,
-                'by_reference' => false,
-            ))
+            ->add('kontzeptuak', CollectionType::class, ['entry_type' => KontzeptuaType::class, 'allow_add' => true, 'allow_delete' => true, 'prototype' => true, 'by_reference' => false])
+            ->add('parrafoak', CollectionType::class, ['entry_type' => AzpiatalaparrafoaType::class, 'allow_add' => true, 'allow_delete' => true, 'prototype' => true, 'by_reference' => false])
         ;
     }
     
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Azpiatala'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Azpiatala::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


55) src/Form/AzpiatalaparrafoaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Azpiatalaparrafoa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Azpiatalaparrafoa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


56) src/Form/AzpisailaType.php:38

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Azpisaila'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Azpisaila::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


57) src/Form/BaldintzaType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Baldintza'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Baldintza::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


58) src/Form/BarrutiaType.php:24

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Barrutia'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Barrutia::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


59) src/Form/Besteak1Type.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Besteak1'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Besteak1::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


60) src/Form/Besteak2Type.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Besteak2'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Besteak2::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


61) src/Form/Besteak3Type.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Besteak3'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Besteak3::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


62) src/Form/DatuenbabesaType.php:31

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Datuenbabesa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Datuenbabesa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


63) src/Form/DoklagunType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Doklagun'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Doklagun::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


64) src/Form/DokumentazioaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Dokumentazioa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Dokumentazioa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


65) src/Form/DokumentumotaType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Dokumentumota'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Dokumentumota::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


66) src/Form/EraikinaType.php:27

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Eraikina'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Eraikina::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


67) src/Form/EremuakType.php:17

    ---------- begin diff ----------
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder
-            ->add('oharraktext',CheckboxType::class, array(
-                'label'    => 'messages.oharraktext',
-                'translation_domain' => 'messages',
-                ))
-            ->add('oharraklabeleu',TextType::class, array(
-                'label' => 'messages.oharraklabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('oharraklabeles',TextType::class, array(
-                'label' => 'messages.oharraklabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('helburuatext',CheckboxType::class, array(
-                'label'    => 'messages.helburuatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('helburualabeleu',TextType::class, array(
-                'label' => 'messages.helburualabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('helburualabeles',TextType::class, array(
-                'label' => 'messages.helburualabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('ebazpensinpli',CheckboxType::class, array(
-                'label'    => 'messages.ebazpensinpli',
-                'translation_domain' => 'messages',
-            ))
-            ->add('ebazpensinplilabeleu',TextType::class, array(
-                'label' => 'messages.ebazpensinplilabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('ebazpensinplilabeles',TextType::class, array(
-                'label' => 'messages.ebazpensinplilabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arduraaitorpena',CheckboxType::class, array(
-                'label'    => 'messages.arduraaitorpena',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arduraaitorpenalabeleu',TextType::class, array(
-                'label' => 'messages.arduraaitorpenalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arduraaitorpenalabeles',TextType::class, array(
-                'label' => 'messages.arduraaitorpenalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('aurreikusi',CheckboxType::class, array(
-                'label'    => 'messages.aurreikusi',
-                'translation_domain' => 'messages',
-            ))
-            ->add('aurreikusilabeleu',TextType::class, array(
-                'label' => 'messages.aurreikusilabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('aurreikusilabeles',TextType::class, array(
-                'label' => 'messages.aurreikusilabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arrunta',CheckboxType::class, array(
-                'label'    => 'messages.arrunta',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arruntalabeleu',TextType::class, array(
-                'label' => 'messages.arruntalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('arruntalabeles',TextType::class, array(
-                'label' => 'messages.arruntalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('isiltasunadmin',CheckboxType::class, array(
-                'label'    => 'messages.isiltasunadmin',
-                'translation_domain' => 'messages',
-            ))
-            ->add('isiltasunadminlabeleu',TextType::class, array(
-                'label' => 'messages.isiltasunadminlabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('isiltasunadminlabeles',TextType::class, array(
-                'label' => 'messages.isiltasunadminlabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkeskatutext',CheckboxType::class, array(
-                'label'    => 'messages.norkeskatutext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkeskatutable',CheckboxType::class, array(
-                'label'    => 'messages.norkeskatutable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkeskatulabeleu',TextType::class, array(
-                'label' => 'messages.norkeskatulabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkeskatulabeles',TextType::class, array(
-                'label' => 'messages.norkeskatulabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('dokumentazioatext',CheckboxType::class, array(
-                'label'    => 'messages.dokumentazioatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('dokumentazioatable',CheckboxType::class, array(
-                'label'    => 'messages.dokumentazioatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('dokumentazioalabeleu',TextType::class, array(
-                'label' => 'messages.dokumentazioalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('dokumentazioalabeles',TextType::class, array(
-                'label' => 'messages.dokumentazioalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kostuatext',CheckboxType::class, array(
-                'label'    => 'messages.kostuatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kostuatable',CheckboxType::class, array(
-                'label'    => 'messages.kostuatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kostualabeleu',TextType::class, array(
-                'label' => 'messages.kostualabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kostualabeles',TextType::class, array(
-                'label' => 'messages.kostualabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('araudiatext',CheckboxType::class, array(
-                'label'    => 'messages.araudiatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('araudiatable',CheckboxType::class, array(
-                'label'    => 'messages.araudiatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('araudialabeleu',TextType::class, array(
-                'label' => 'messages.araudialabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('araudialabeles',TextType::class, array(
-                'label' => 'messages.araudialabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('prozeduratext',CheckboxType::class, array(
-                'label'    => 'messages.prozeduratext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('prozeduratable',CheckboxType::class, array(
-                'label'    => 'messages.prozeduratable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('prozeduralabeleu',TextType::class, array(
-                'label' => 'messages.prozeduralabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('prozeduralabeles',TextType::class, array(
-                'label' => 'messages.prozeduralabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doklaguntext',CheckboxType::class, array(
-                'label'    => 'messages.doklaguntext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doklaguntable',CheckboxType::class, array(
-                'label'    => 'messages.doklaguntable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doklagunlabeleu',TextType::class, array(
-                'label' => 'messages.doklagunlabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doklagunlabeles',TextType::class, array(
-                'label' => 'messages.doklagunlabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('datuenbabesatext',CheckboxType::class, array(
-                'label'    => 'messages.datuenbabesatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('datuenbabesatable',CheckboxType::class, array(
-                'label'    => 'messages.datuenbabesatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('datuenbabesalabeleu',TextType::class, array(
-                'label' => 'messages.datuenbabesalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('datuenbabesalabeles',TextType::class, array(
-                'label' => 'messages.datuenbabesalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('azpisailatable',CheckboxType::class, array(
-                'label'    => 'messages.azpisailatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('azpisailalabeleu',TextType::class, array(
-                'label' => 'messages.azpisailalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('azpisailalabeles',TextType::class, array(
-                'label' => 'messages.azpisailalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkebatzitext',CheckboxType::class, array(
-                'label'    => 'messages.norkebatzitext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkebatzitable',CheckboxType::class, array(
-                'label'    => 'messages.norkebatzitable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkebatzilabeleu',TextType::class, array(
-                'label' => 'messages.norkebatzilabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('norkebatzilabeles',TextType::class, array(
-                'label' => 'messages.norkebatzilabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak1text',CheckboxType::class, array(
-                'label'    => 'messages.besteak1text',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak1table',CheckboxType::class, array(
-                'label'    => 'messages.besteak1table',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak1labeleu',TextType::class, array(
-                'label' => 'messages.besteak1labeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak1labeles',TextType::class, array(
-                'label' => 'messages.besteak1labeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak2text',CheckboxType::class, array(
-                'label'    => 'messages.besteak2text',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak2table',CheckboxType::class, array(
-                'label'    => 'messages.besteak2table',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak2labeleu',TextType::class, array(
-                'label' => 'messages.besteak2labeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak2labeles',TextType::class, array(
-                'label' => 'messages.besteak2labeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak3text',CheckboxType::class, array(
-                'label'    => 'messages.besteak3text',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak3table',CheckboxType::class, array(
-                'label'    => 'messages.besteak3table',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak3labeleu',TextType::class, array(
-                'label' => 'messages.besteak3labeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('besteak3labeles',TextType::class, array(
-                'label' => 'messages.besteak3labeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kanalatext',CheckboxType::class, array(
-                'label'    => 'messages.kanalatext',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kanalatable',CheckboxType::class, array(
-                'label'    => 'messages.kanalatable',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kanalalabeleu',TextType::class, array(
-                'label' => 'messages.kanalalabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('kanalalabeles',TextType::class, array(
-                'label' => 'messages.kanalalabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('epealabeleu',TextType::class, array(
-                'label' => 'messages.epealabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('epealabeles',TextType::class, array(
-                'label' => 'messages.epealabeles',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doanlabeleu',TextType::class, array(
-                'label' => 'messages.doanlabeleu',
-                'translation_domain' => 'messages',
-            ))
-            ->add('doanlabeles',TextType::class, array(
-                'label' => 'messages.doanlabeles',
-                'translation_domain' => 'messages',
-            ))
+            ->add('oharraktext',CheckboxType::class, ['label'    => 'messages.oharraktext', 'translation_domain' => 'messages'])
+            ->add('oharraklabeleu',TextType::class, ['label' => 'messages.oharraklabeleu', 'translation_domain' => 'messages'])
+            ->add('oharraklabeles',TextType::class, ['label' => 'messages.oharraklabeles', 'translation_domain' => 'messages'])
+            ->add('helburuatext',CheckboxType::class, ['label'    => 'messages.helburuatext', 'translation_domain' => 'messages'])
+            ->add('helburualabeleu',TextType::class, ['label' => 'messages.helburualabeleu', 'translation_domain' => 'messages'])
+            ->add('helburualabeles',TextType::class, ['label' => 'messages.helburualabeles', 'translation_domain' => 'messages'])
+            ->add('ebazpensinpli',CheckboxType::class, ['label'    => 'messages.ebazpensinpli', 'translation_domain' => 'messages'])
+            ->add('ebazpensinplilabeleu',TextType::class, ['label' => 'messages.ebazpensinplilabeleu', 'translation_domain' => 'messages'])
+            ->add('ebazpensinplilabeles',TextType::class, ['label' => 'messages.ebazpensinplilabeles', 'translation_domain' => 'messages'])
+            ->add('arduraaitorpena',CheckboxType::class, ['label'    => 'messages.arduraaitorpena', 'translation_domain' => 'messages'])
+            ->add('arduraaitorpenalabeleu',TextType::class, ['label' => 'messages.arduraaitorpenalabeleu', 'translation_domain' => 'messages'])
+            ->add('arduraaitorpenalabeles',TextType::class, ['label' => 'messages.arduraaitorpenalabeles', 'translation_domain' => 'messages'])
+            ->add('aurreikusi',CheckboxType::class, ['label'    => 'messages.aurreikusi', 'translation_domain' => 'messages'])
+            ->add('aurreikusilabeleu',TextType::class, ['label' => 'messages.aurreikusilabeleu', 'translation_domain' => 'messages'])
+            ->add('aurreikusilabeles',TextType::class, ['label' => 'messages.aurreikusilabeles', 'translation_domain' => 'messages'])
+            ->add('arrunta',CheckboxType::class, ['label'    => 'messages.arrunta', 'translation_domain' => 'messages'])
+            ->add('arruntalabeleu',TextType::class, ['label' => 'messages.arruntalabeleu', 'translation_domain' => 'messages'])
+            ->add('arruntalabeles',TextType::class, ['label' => 'messages.arruntalabeles', 'translation_domain' => 'messages'])
+            ->add('isiltasunadmin',CheckboxType::class, ['label'    => 'messages.isiltasunadmin', 'translation_domain' => 'messages'])
+            ->add('isiltasunadminlabeleu',TextType::class, ['label' => 'messages.isiltasunadminlabeleu', 'translation_domain' => 'messages'])
+            ->add('isiltasunadminlabeles',TextType::class, ['label' => 'messages.isiltasunadminlabeles', 'translation_domain' => 'messages'])
+            ->add('norkeskatutext',CheckboxType::class, ['label'    => 'messages.norkeskatutext', 'translation_domain' => 'messages'])
+            ->add('norkeskatutable',CheckboxType::class, ['label'    => 'messages.norkeskatutable', 'translation_domain' => 'messages'])
+            ->add('norkeskatulabeleu',TextType::class, ['label' => 'messages.norkeskatulabeleu', 'translation_domain' => 'messages'])
+            ->add('norkeskatulabeles',TextType::class, ['label' => 'messages.norkeskatulabeles', 'translation_domain' => 'messages'])
+            ->add('dokumentazioatext',CheckboxType::class, ['label'    => 'messages.dokumentazioatext', 'translation_domain' => 'messages'])
+            ->add('dokumentazioatable',CheckboxType::class, ['label'    => 'messages.dokumentazioatable', 'translation_domain' => 'messages'])
+            ->add('dokumentazioalabeleu',TextType::class, ['label' => 'messages.dokumentazioalabeleu', 'translation_domain' => 'messages'])
+            ->add('dokumentazioalabeles',TextType::class, ['label' => 'messages.dokumentazioalabeles', 'translation_domain' => 'messages'])
+            ->add('kostuatext',CheckboxType::class, ['label'    => 'messages.kostuatext', 'translation_domain' => 'messages'])
+            ->add('kostuatable',CheckboxType::class, ['label'    => 'messages.kostuatable', 'translation_domain' => 'messages'])
+            ->add('kostualabeleu',TextType::class, ['label' => 'messages.kostualabeleu', 'translation_domain' => 'messages'])
+            ->add('kostualabeles',TextType::class, ['label' => 'messages.kostualabeles', 'translation_domain' => 'messages'])
+            ->add('araudiatext',CheckboxType::class, ['label'    => 'messages.araudiatext', 'translation_domain' => 'messages'])
+            ->add('araudiatable',CheckboxType::class, ['label'    => 'messages.araudiatable', 'translation_domain' => 'messages'])
+            ->add('araudialabeleu',TextType::class, ['label' => 'messages.araudialabeleu', 'translation_domain' => 'messages'])
+            ->add('araudialabeles',TextType::class, ['label' => 'messages.araudialabeles', 'translation_domain' => 'messages'])
+            ->add('prozeduratext',CheckboxType::class, ['label'    => 'messages.prozeduratext', 'translation_domain' => 'messages'])
+            ->add('prozeduratable',CheckboxType::class, ['label'    => 'messages.prozeduratable', 'translation_domain' => 'messages'])
+            ->add('prozeduralabeleu',TextType::class, ['label' => 'messages.prozeduralabeleu', 'translation_domain' => 'messages'])
+            ->add('prozeduralabeles',TextType::class, ['label' => 'messages.prozeduralabeles', 'translation_domain' => 'messages'])
+            ->add('doklaguntext',CheckboxType::class, ['label'    => 'messages.doklaguntext', 'translation_domain' => 'messages'])
+            ->add('doklaguntable',CheckboxType::class, ['label'    => 'messages.doklaguntable', 'translation_domain' => 'messages'])
+            ->add('doklagunlabeleu',TextType::class, ['label' => 'messages.doklagunlabeleu', 'translation_domain' => 'messages'])
+            ->add('doklagunlabeles',TextType::class, ['label' => 'messages.doklagunlabeles', 'translation_domain' => 'messages'])
+            ->add('datuenbabesatext',CheckboxType::class, ['label'    => 'messages.datuenbabesatext', 'translation_domain' => 'messages'])
+            ->add('datuenbabesatable',CheckboxType::class, ['label'    => 'messages.datuenbabesatable', 'translation_domain' => 'messages'])
+            ->add('datuenbabesalabeleu',TextType::class, ['label' => 'messages.datuenbabesalabeleu', 'translation_domain' => 'messages'])
+            ->add('datuenbabesalabeles',TextType::class, ['label' => 'messages.datuenbabesalabeles', 'translation_domain' => 'messages'])
+            ->add('azpisailatable',CheckboxType::class, ['label'    => 'messages.azpisailatable', 'translation_domain' => 'messages'])
+            ->add('azpisailalabeleu',TextType::class, ['label' => 'messages.azpisailalabeleu', 'translation_domain' => 'messages'])
+            ->add('azpisailalabeles',TextType::class, ['label' => 'messages.azpisailalabeles', 'translation_domain' => 'messages'])
+            ->add('norkebatzitext',CheckboxType::class, ['label'    => 'messages.norkebatzitext', 'translation_domain' => 'messages'])
+            ->add('norkebatzitable',CheckboxType::class, ['label'    => 'messages.norkebatzitable', 'translation_domain' => 'messages'])
+            ->add('norkebatzilabeleu',TextType::class, ['label' => 'messages.norkebatzilabeleu', 'translation_domain' => 'messages'])
+            ->add('norkebatzilabeles',TextType::class, ['label' => 'messages.norkebatzilabeles', 'translation_domain' => 'messages'])
+            ->add('besteak1text',CheckboxType::class, ['label'    => 'messages.besteak1text', 'translation_domain' => 'messages'])
+            ->add('besteak1table',CheckboxType::class, ['label'    => 'messages.besteak1table', 'translation_domain' => 'messages'])
+            ->add('besteak1labeleu',TextType::class, ['label' => 'messages.besteak1labeleu', 'translation_domain' => 'messages'])
+            ->add('besteak1labeles',TextType::class, ['label' => 'messages.besteak1labeles', 'translation_domain' => 'messages'])
+            ->add('besteak2text',CheckboxType::class, ['label'    => 'messages.besteak2text', 'translation_domain' => 'messages'])
+            ->add('besteak2table',CheckboxType::class, ['label'    => 'messages.besteak2table', 'translation_domain' => 'messages'])
+            ->add('besteak2labeleu',TextType::class, ['label' => 'messages.besteak2labeleu', 'translation_domain' => 'messages'])
+            ->add('besteak2labeles',TextType::class, ['label' => 'messages.besteak2labeles', 'translation_domain' => 'messages'])
+            ->add('besteak3text',CheckboxType::class, ['label'    => 'messages.besteak3text', 'translation_domain' => 'messages'])
+            ->add('besteak3table',CheckboxType::class, ['label'    => 'messages.besteak3table', 'translation_domain' => 'messages'])
+            ->add('besteak3labeleu',TextType::class, ['label' => 'messages.besteak3labeleu', 'translation_domain' => 'messages'])
+            ->add('besteak3labeles',TextType::class, ['label' => 'messages.besteak3labeles', 'translation_domain' => 'messages'])
+            ->add('kanalatext',CheckboxType::class, ['label'    => 'messages.kanalatext', 'translation_domain' => 'messages'])
+            ->add('kanalatable',CheckboxType::class, ['label'    => 'messages.kanalatable', 'translation_domain' => 'messages'])
+            ->add('kanalalabeleu',TextType::class, ['label' => 'messages.kanalalabeleu', 'translation_domain' => 'messages'])
+            ->add('kanalalabeles',TextType::class, ['label' => 'messages.kanalalabeles', 'translation_domain' => 'messages'])
+            ->add('epealabeleu',TextType::class, ['label' => 'messages.epealabeleu', 'translation_domain' => 'messages'])
+            ->add('epealabeles',TextType::class, ['label' => 'messages.epealabeles', 'translation_domain' => 'messages'])
+            ->add('doanlabeleu',TextType::class, ['label' => 'messages.doanlabeleu', 'translation_domain' => 'messages'])
+            ->add('doanlabeles',TextType::class, ['label' => 'messages.doanlabeles', 'translation_domain' => 'messages'])
 //            ->add('udala',TextType::class, array(
 //                'label'    => 'messages.udala',
 //                'translation_domain' => 'messages',
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Eremuak'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Eremuak::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


68) src/Form/EspedientekudeaketaType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Espedientekudeaketa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Espedientekudeaketa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


69) src/Form/EtiketaType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Etiketa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Etiketa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


70) src/Form/FamiliaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Familia'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Familia::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


71) src/Form/FitxaAraudiaType.php:27

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\FitxaAraudia'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\FitxaAraudia::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


72) src/Form/FitxaKostuaType.php:33

    ---------- begin diff ----------
@@ @@
         $valftp = (string)$proba->getBody();
         $array = json_decode($valftp, true);

-        $resp=array("Aukeratu bat" => "-1");
+        $resp=["Aukeratu bat" => "-1"];
         foreach ($array as $a)
         {
             $txt ="";
@@ @@
         $builder
             ->add('udala')
             ->add('fitxa')
-            ->add('kostua', ChoiceType::class, array(
-                'choices' => $resp
-                )
+            ->add('kostua', ChoiceType::class, ['choices' => $resp]

             )
         ;
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\FitxaKostua',
-            'udala' => null,
-            'api_url' => null
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\FitxaKostua::class, 'udala' => null, 'api_url' => null]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


73) src/Form/FitxaProzeduraType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\FitxaProzedura'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\FitxaProzedura::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


74) src/Form/FitxaType.php:40

    ---------- begin diff ----------
@@ @@
                 ->add(
                     'helburuaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'helburuaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'norkeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'norkes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'dokumentazioaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'dokumentazioaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'kostuaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'kostuaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add( 'ebazpensinpli' )
                 ->add( 'arduraaitorpena' )
@@ @@
                 ->add(
                     'araudiaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'araudiaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'prozeduraeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'prozeduraes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'doklaguneu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'doklagunes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'oharrakeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'oharrakes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'jarraibideakeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'jarraibideakes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add( 'publikoa' )
                 ->add( 'hitzarmena' )
                 ->add( 'kontsultak' )
                 ->add( 'parametroa' )
-                ->add( 'createdAt', DatetimeType::class, array ('widget' => 'single_text') )
-                ->add( 'updatedAt', DatetimeType::class, array ('widget' => 'single_text') )
+                ->add( 'createdAt', DatetimeType::class, ['widget' => 'single_text'] )
+                ->add( 'updatedAt', DatetimeType::class, ['widget' => 'single_text'] )
                 ->add(
                     'besteak1eu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'besteak1es',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'besteak2eu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'besteak2es',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'besteak3eu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'besteak3es',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'datuenbabesaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'datuenbabesaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'norkonartueu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'norkonartues',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'kanalaeu',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add(
                     'kanalaes',
                     CKEditorType::class,
-                    array (
-                        'config' => array (),
-                    )
+                    ['config' => []]
                 )
                 ->add( 'udala' )
                 ->add( 'norkebatzi' )
@@ @@
                 ->add(
                     'dokumentazioak',
                     EntityType::class,
-                    array (
-                        'class'       => Dokumentazioa::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu dokumentuak',
-                        'group_by'    => 'dokumentumota',
-                    )
+                    ['class'       => Dokumentazioa::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu dokumentuak', 'group_by'    => 'dokumentumota']
                 )
                 ->add(
                     'etiketak',
                     EntityType::class,
-                    array (
-                        'class'       => Etiketa::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu etiketak',
-                        'empty_data'  => [],
-                    )
+                    ['class'       => Etiketa::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu etiketak', 'empty_data'  => []]
                 )
                 ->add(
                     'kanalak',
                     EntityType::class,
-                    array (
-                        'class'       => Kanala::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu kanalak',
-                        'group_by'    => 'kanalmota',
-                    )
+                    ['class'       => Kanala::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu kanalak', 'group_by'    => 'kanalmota']
                 )
                 ->add(
                     'besteak1ak',
                     EntityType::class,
-                    array (
-                        'class'       => Besteak1::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu besteak1',
-                    )
+                    ['class'       => Besteak1::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu besteak1']
                 )
                 ->add(
                     'besteak2ak',
                     EntityType::class,
-                    array (
-                        'class'       => Besteak2::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu besteak2',
-                    )
+                    ['class'       => Besteak2::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu besteak2']
                 )
                 ->add(
                     'besteak3ak',
                     EntityType::class,
-                    array (
-                        'class'       => Besteak3::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu besteak3',
-                    )
+                    ['class'       => Besteak3::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu besteak3']
                 )
                 ->add(
                     'norkeskatuak',
                     EntityType::class,
-                    array (
-                        'class'       => Norkeskatu::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu nork eska dezakeen',
-                    )
+                    ['class'       => Norkeskatu::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu nork eska dezakeen']
                 )
                 ->add(
                     'doklagunak',
                     EntityType::class,
-                    array (
-                        'class'       => Doklagun::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu dokumentazio lagungarria',
-                    )
+                    ['class'       => Doklagun::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu dokumentazio lagungarria']
                 )
                 ->add(
                     'azpiatalak',
                     EntityType::class,
-                    array (
-                        'class'       => Azpiatala::class,
-                        'required'    => false,
-                        'multiple'    => 'multiple',
-                        'placeholder' => 'Aukeratu kostu taulak',
-
-                    )
+                    ['class'       => Azpiatala::class, 'required'    => false, 'multiple'    => 'multiple', 'placeholder' => 'Aukeratu kostu taulak']
                 )
                 ->add(
                     'prozedurak',
                     CollectionType::class,
-                    array (
-                        'entry_type'   => FitxaProzeduraType::class,
-                        'allow_add'    => true,
-                        'allow_delete' => true,
-                        'by_reference' => false,
-                    )
+                    ['entry_type'   => FitxaProzeduraType::class, 'allow_add'    => true, 'allow_delete' => true, 'by_reference' => false]
                 )
                 ->add(
                     'araudiak',
                     CollectionType::class,
-                    array (
-                        'entry_type'   => FitxaAraudiaType::class,
-                        'allow_add'    => true,
-                        'allow_delete' => true,
-                        'by_reference' => false,
-                    )
+                    ['entry_type'   => FitxaAraudiaType::class, 'allow_add'    => true, 'allow_delete' => true, 'by_reference' => false]
                 )
                 ->add(
                     'kostuak',
                     CollectionType::class,
-                    array (
-                        'entry_type'   => FitxaKostuaType::class,
-                        'entry_options'  => array(
-                            'udala' => $user->getUdala() !== null ? $user->getUdala()->getId() : null,
-                            'api_url' => $api_url
-                        ),
-                        'allow_add'    => true,
-                        'allow_delete' => true,
-                        'by_reference' => false
-                    )
+                    ['entry_type'   => FitxaKostuaType::class, 'entry_options'  => ['udala' => $user->getUdala() !== null ? $user->getUdala()->getId() : null, 'api_url' => $api_url], 'allow_add'    => true, 'allow_delete' => true, 'by_reference' => false]
                 )

             ;
@@ @@
         public function configureOptions ( OptionsResolver $resolver )
         {
             $resolver->setDefaults(
-                array (
-                    'data_class' => Fitxa::class,
-                    'user' => null,
-                    'api_url' => null
-                )
+                ['data_class' => Fitxa::class, 'user' => null, 'api_url' => null]
             );
         }
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector


75) src/Form/FitxafamiliaType.php:27

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Fitxafamilia'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Fitxafamilia::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


76) src/Form/FitxanewType.php:33

    ---------- begin diff ----------
@@ @@
         public function configureOptions ( OptionsResolver $resolver )
         {
             $resolver->setDefaults(
-                array (
-                    'data_class' => 'App\Entity\Fitxa'
-                )
+                ['data_class' => \App\Entity\Fitxa::class]
             );
         }
     }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


77) src/Form/IsiltasunAdministratiboaType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\IsiltasunAdministratiboa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\IsiltasunAdministratiboa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


78) src/Form/KaleaType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Kalea'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Kalea::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


79) src/Form/KanalaType.php:41

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Kanala'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Kanala::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


80) src/Form/KanalmotaType.php:27

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Kanalmota'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Kanalmota::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


81) src/Form/KontzeptuaType.php:34

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Kontzeptua'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Kontzeptua::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


82) src/Form/KontzeptumotaType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Kontzeptumota'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Kontzeptumota::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


83) src/Form/NorkebatziType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Norkebatzi'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Norkebatzi::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


84) src/Form/NorkeskatuType.php:26

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Norkeskatu'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Norkeskatu::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


85) src/Form/OrdenantzaType.php:29

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Ordenantza'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Ordenantza::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


86) src/Form/OrdenantzaparrafoaType.php:17

    ---------- begin diff ----------
@@ @@
         $builder
             ->add('ordena')
 //            ->add('testuaeu')
-            ->add('testuaeu',CKEditorType::class, array(
-                'config' => array()))
-            ->add('testuaes',CKEditorType::class, array(
-                'config' => array()))
+            ->add('testuaeu',CKEditorType::class, ['config' => []])
+            ->add('testuaes',CKEditorType::class, ['config' => []])
 //            ->add('testuaes')
 //            ->add('createdAt', 'datetime')
 //            ->add('updatedAt', 'datetime')
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Ordenantzaparrafoa'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Ordenantzaparrafoa::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


87) src/Form/ProzeduraType.php:25

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Prozedura'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Prozedura::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


88) src/Form/SailaType.php:27

    ---------- begin diff ----------
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Saila'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Saila::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


89) src/Form/SuperuserType.php:27

    ---------- begin diff ----------
@@ @@
             ->add('azpisaila')
             ->add('enabled')
             ->add('email')
-            ->add('roles',  ChoiceType::class, array(
-                'multiple' => true,
-                'choices'  => array(
-                    'Super Admin' => 'ROLE_SUPER_ADMIN',
-                    'Admin' => 'ROLE_ADMIN',
-                    'Kudeaketa' => 'ROLE_KUDEAKETA',
-                    'Erabiltzailea' => 'ROLE_USER'
-                ),
-            ))
+            ->add('roles',  ChoiceType::class, ['multiple' => true, 'choices'  => ['Super Admin' => 'ROLE_SUPER_ADMIN', 'Admin' => 'ROLE_ADMIN', 'Kudeaketa' => 'ROLE_KUDEAKETA', 'Erabiltzailea' => 'ROLE_USER']])
 //            ->add('password', RepeatedType::class, array(
 //                'type' => PasswordType::class,
 //                'first_options'  => array(
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\User'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\User::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


90) src/Form/UdalaType.php:27

    ---------- begin diff ----------
@@ @@
 //            ->add('eremuak')
             ->add('espedientekudeaketa')
             ->add('orrikatzea')
-            ->add('zergaor', CheckboxType::class, array(
-                'label'    => 'messages.zergaorapp'))
+            ->add('zergaor', CheckboxType::class, ['label'    => 'messages.zergaorapp'])
         ;
     }
     
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Udala'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Udala::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


91) src/Form/UsernewwithpasswordType.php:28

    ---------- begin diff ----------
@@ @@
             ->add('udala')
             ->add('azpisaila')
             ->add('enabled')
-            ->add('email', EmailType::class, array(
-                'required' => true
-            ))
+            ->add('email', EmailType::class, ['required' => true])
 //            ->add('roles')
 //            ->add('password')
-            ->add('roles',  ChoiceType::class, array(
-                'multiple' => true,
-                'choices'  => array(
-                    'Admin' => 'ROLE_ADMIN',
-                    'Kudeaketa' => 'ROLE_KUDEAKETA',
-                    'Erabiltzailea' => 'ROLE_USER'
-                ),
-            ))
-            ->add('password', RepeatedType::class, array(
-                'type' => PasswordType::class,
-                'first_options'  => array(
-                    'label' => 'messages.pasahitza',
-                    'translation_domain' => 'messages',
-                ),
-                'second_options' => array(
-                    'label' => 'messages.pasahitzaerrepikatu',
-                    'translation_domain' => 'messages',
-                ),
-            ))
+            ->add('roles',  ChoiceType::class, ['multiple' => true, 'choices'  => ['Admin' => 'ROLE_ADMIN', 'Kudeaketa' => 'ROLE_KUDEAKETA', 'Erabiltzailea' => 'ROLE_USER']])
+            ->add('password', RepeatedType::class, ['type' => PasswordType::class, 'first_options'  => ['label' => 'messages.pasahitza', 'translation_domain' => 'messages'], 'second_options' => ['label' => 'messages.pasahitzaerrepikatu', 'translation_domain' => 'messages']])
         ;
     }
     
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\User'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\User::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


92) src/Form/UserpasswdType.php:23

    ---------- begin diff ----------
@@ @@
     {
         parent::buildForm($builder, $options);
         $builder
-            ->add('password', RepeatedType::class, array(
-                'type' => PasswordType::class,
-                'first_options'  => array(
-                    'label' => 'messages.pasahitza',
-                    'translation_domain' => 'messages',
-                ),
-                'second_options' => array(
-                    'label' => 'messages.pasahitzaerrepikatu',
-                    'translation_domain' => 'messages',
-                ),
-            ))
+            ->add('password', RepeatedType::class, ['type' => PasswordType::class, 'first_options'  => ['label' => 'messages.pasahitza', 'translation_domain' => 'messages'], 'second_options' => ['label' => 'messages.pasahitzaerrepikatu', 'translation_domain' => 'messages']])
         ;
     }
     
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\User'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\User::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


93) src/Form/ZerbitzuaType.php:16

    ---------- begin diff ----------
@@ @@
     public function buildForm(FormBuilderInterface $builder, array $options)
     {
         $builder
-            ->add('kodea',TextType::class, array(
-                'label' => 'messages.kodea',
-                'translation_domain' => 'messages',
-            ))
-            ->add('zerbitzuaeu',TextType::class, array(
-                'label' => 'messages.zerbitzua',
-                'translation_domain' => 'messages',
-            ))
-            ->add('zerbitzuaes',TextType::class, array(
-                'label' => 'messages.zerbitzua',
-                'translation_domain' => 'messages',
-            ))
-            ->add('erroaeu',TextType::class, array(
-                'label' => 'messages.erroa',
-                'translation_domain' => 'messages',
-            ))
-            ->add('erroaes',TextType::class, array(
-                'label' => 'messages.erroa',
-                'translation_domain' => 'messages',
-            ))
+            ->add('kodea',TextType::class, ['label' => 'messages.kodea', 'translation_domain' => 'messages'])
+            ->add('zerbitzuaeu',TextType::class, ['label' => 'messages.zerbitzua', 'translation_domain' => 'messages'])
+            ->add('zerbitzuaes',TextType::class, ['label' => 'messages.zerbitzua', 'translation_domain' => 'messages'])
+            ->add('erroaeu',TextType::class, ['label' => 'messages.erroa', 'translation_domain' => 'messages'])
+            ->add('erroaes',TextType::class, ['label' => 'messages.erroa', 'translation_domain' => 'messages'])
 //            ->add('espedientekudeaketa')
         ;
     }
@@ @@
      */
     public function configureOptions(OptionsResolver $resolver)
     {
-        $resolver->setDefaults(array(
-            'data_class' => 'App\Entity\Zerbitzua'
-        ));
+        $resolver->setDefaults(['data_class' => \App\Entity\Zerbitzua::class]);
     }
 }
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector
 * StringClassNameToClassConstantRector (https://wiki.php.net/rfc/class_name_scalars https://github.com/symfony/symfony/blob/2.8/UPGRADE-2.8.md#form)


94) src/Menu/Builder.php:40

    ---------- begin diff ----------
@@ @@
         $menu = $factory->createItem('root');
         $menu->setChildrenAttribute('class', 'nav');

-        $menu->addChild('Fitxa', array('route' => 'fitxa_index'))
+        $menu->addChild('Fitxa', ['route' => 'fitxa_index'])
             ->setAttribute('icon', 'icon-list');

-        $menu->addChild('Araudia', array('route' => 'araudia_index'))
+        $menu->addChild('Araudia', ['route' => 'araudia_index'])
             ->setAttribute('icon', 'icon-group');



-        $menu->addChild('User', array('label' => 'Hi visitor'))
+        $menu->addChild('User', ['label' => 'Hi visitor'])
             ->setAttribute('dropdown', true)
             ->setAttribute('icon', 'icon-user');
-        $menu['User']->addChild('Edit profile', array('route' => 'dokumentazioa_index'))
+        $menu['User']->addChild('Edit profile', ['route' => 'dokumentazioa_index'])
             ->setAttribute('icon', 'icon-edit');
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector


95) src/Tests/Controller/AbstractControllerTest.php:34

    ---------- begin diff ----------
@@ @@
         $loginManager = $container->get('fos_user.security.login_manager');
         $firewallName = $container->getParameter('fos_user.firewall_name');

-        $user = $userManager->findUserBy(array('username' => 'pasaia'));
+        $user = $userManager->findUserBy(['username' => 'pasaia']);
         $loginManager->loginUser($firewallName, $user);

         // save the login token into the session and put it in a cookie
    ----------- end diff -----------

Applied rules:
 * LongArrayToShortArrayRector


 [ERROR] Could not process "src/Command/IzfeztCommand.php" file, due to:                                                
         "Undefined class constant 'KIND_NON_EMPTY_LIST'". On line: 761                                                 

